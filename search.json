[
  {
    "href": "blog/2019/10/17/9",
    "title": "#9 Robot dokumentuje, czyli technical writing przyszłości",
    "contents": "Podobno nikt nie jest niezastąpiony, ale czy można zastąpić całą grupę zawodową? Zwłaszcza ludzi, którzy robią research, rozmawiają z innymi i piszą? O automatyzacji w technical writingu rozmawia z nami Wojtek Aleksander. Informacje dodatkowe: \"The Future of Employment: How susceptible are jobs to computerisation?\", Oxford Martin: https://www.oxfordmartin.ox.ac.uk/publications/the-future-of-employment/ \"10 skills you'll need to survive the rise of automation\", World Economic Forum: https://www.weforum.org/agenda/2018/07/the-skills-needed-to-survive-the-robot-invasion-of-the-workplace \"JPMorgan Chase inks 5-year deal to generate marketing copy via AI\", Marketing Dive: https://www.marketingdive.com/news/jpmorgan-chase-inks-5-year-deal-to-generate-marketing-copy-via-ai/559836/ Horse ebooks (Twitter bot): https://twitter.com/horse_ebooks Bot or not: http://botpoet.com/ \"Can science writing be automated?\", MIT News: http://news.mit.edu/2019/can-science-writing-be-automated-ai-0418 \"Lithium-Ion Batteries. A Machine-Generated Summary of Current Research\", Springer: https://link.springer.com/book/10.1007/978-3-030-16800-1 \"The Rise of the Robot Reporter\", New York Times: https://www.nytimes.com/2019/02/05/business/media/artificial-intelligence-journalism-robots.html Konferencja Tłumaczy: https://www.konferencjatlumaczy.pl/ Wojtek Aleksander (profil LinkedIn): https://www.linkedin.com/in/waleksander/"
  },
  {
    "href": "blog/2019/11/15/10",
    "title": "#10 Docusaurus - Tech Writer dokarmia dinozaury",
    "contents": "Docusaurus to static site generator stworzony przez Facebooka, którego główną zaletą jest prostota. Rozmawiamy o tym co oferuje to narzędzie, jakie są jego mocne i słabe strony oraz w jakich sytuacjach może się sprawdzić jako rozwiązanie do tworzenia dokumentacji. Informacje dodatkowe: Docusaurus: https://docusaurus.io/ Using Docusaurus to Create Open Source Websites: https://www.youtube.com/watch?v=QcGJsf6mgZE React: https://pl.reactjs.org/ Crowdin: https://crowdin.com/ StaticGen: https://www.staticgen.com/ I'd Rather Be Writing: https://idratherbewriting.com/ Tech Writer koduje: https://techwriterkoduje.pl/"
  },
  {
    "href": "blog/2019/12/12/11",
    "title": "#11 Robot dokumentuje część 2 - automatyzacja kontra ludzie",
    "contents": "Spotkaliśmy się z Agatą Rygielską i rozmawialiśmy o wpływie automatyzacji na ludzi i ich pracę. Agata jest Technical Writerką od 2 lat, a wcześniej pracowała w branży tłumaczeniowej. Widziała jak automatyzacja doprowadziła do marginalizacji \"białkowych\" tłumaczy. Jej doświadczenia doprowadziły nas do rozważań o przyszłości komunikacji technicznej. Czy przyszłość rysuje się optymistycznie dla Technical Writerów, czy raczej w ciemnych barwach? Informacje dodatkowe: DeepL: https://www.deepl.com/translator MadCap Software: https://www.madcapsoftware.com/ Konferencja Tłumaczy: https://www.konferencjatlumaczy.pl/"
  },
  {
    "href": "blog/2019/5/14/1",
    "title": "#1 Docs like code - rozważania praktyczne i filozoficzne",
    "contents": "\"Docs like code\" czy \"Docs as code\" to model tworzenia dokumentacji, który staje się coraz bardziej popularny wśród Tech Writerów w IT. Głównym założeniem jest traktowanie dokumentacji jak kodu pod kątem procesów oraz narzędzi, których używamy do jej tworzenia. Ale czy to wszystko? Staramy się przyjrzeć dokładniej temu trendowi, żeby odkryć co jeszcze może się za nim kryć. Informacje dodatkowe: \"Docs like code\", Anne Gentle: https://www.docslikecode.com/book/ Konferencja soap!: http://soapconf.com/ \"Docs as code\", Write the Docs: https://www.writethedocs.org/guide/docs-as-code/"
  },
  {
    "href": "blog/2019/5/23/2",
    "title": "#2 Python - przyjaciel Tech Writera",
    "contents": "Python to język programowania ogólnego zastosowania, który w ostatnich latach zyskuje coraz większą popularność nie tylko wśród programistów. Jednym z powodów jest niewątpliwie jego przystępna składnia przez co osoby, które nie są bardzo techniczne są w stanie dość szybko opanować podstawy kodowania w tym języku. Dlatego też Python wydaje się być dobrą propozycją dla Technical Writerów, którzy chcą tworzyć narzędzia wspomagające proces tworzenia treści. Informacje dodatkowe: Codecademy, kurs Pythona: https://www.codecademy.com/learn/learn-python (niestety, za darmo dostępny jest tylko kurs dla Pythona 2) \"The Hitchhiker’s Guide to Python!\", Kenneth Reitz, Tanya Schlusser: https://docs.python-guide.org/ Real Python: https://realpython.com/ \"Python Tricks: The Book\", Dan Bader: https://realpython.com/products/python-tricks-book/ Python Bytes Podcast: https://pythonbytes.fm/ Talk Python to Me Podcast: https://talkpython.fm/ Test & Code Podcast: https://testandcode.com / The Python Standard Library: https://docs.python.org/3/library/ PEP 8 - Style Guide for Python Code: https://www.python.org/dev/peps/pep-0008/ PEP 20 - The Zen of Python: https://www.python.org/dev/peps/pep-0020/ Biblioteka pyjokes: https://github.com/pyjokes/pyjokes Zegar odliczający czas do zakończenia wsparcia Pythona 2: https://pythonclock.org/ Visual Studio Code: https://code.visualstudio.com IntelliJ IDEA: https://www.jetbrains.com/idea/ PyCharm: https://www.jetbrains.com/pycharm/"
  },
  {
    "href": "blog/2019/6/14/3",
    "title": "#3 SVG - przenieś grafikę w dokumentacji na wyższy poziom",
    "contents": "Scalable Vector Graphics (SVG) kryje w sobie wiele ciekawych aspektów, które Technical Writerzy mogliby potencjalnie wykorzystać. Nasz gość, Daniel Barrio Fierro, od jakiegoś czasu nie tylko pasjonuje się tym formatem, ale również wykorzystuje jego zalety pracując nad dokumentacją. W tym odcinku rozmawiamy z Danielem o tym jak Technical Writerzy mogą zmienić podejście do elementów graficznych w dokumentacji i utrzymywać je sprytniej wykorzystując format SVG. Informacje dodatkowe: CodePen: https://codepen.io/ Inkscape: https://inkscape.org/ Dokumentacja MDN na temat SVG: https://developer.mozilla.org/pl/docs/Web/SVG Dokumentacja W3C na temat SVG 1.1.: https://www.w3.org/TR/SVG11/ Daniel Barrio Fierro (profil LinkedIn): https://www.linkedin.com/in/daniel-barrio-fierro-a95053110/ Daniel Barrio Fierro (strona na GitHub): http://db4rr.github.io"
  },
  {
    "href": "blog/2019/7/24/5",
    "title": "#5 Narzędzia dla Tech Writerów",
    "contents": "Mogłoby się wydawać, że Tech Writerzy nie mają dużych potrzeb jeśli chodzi o narzędzia. W końcu co może być potrzebne do napisania instrukcji? Zapewne wystarczy jakiś prosty edytor i tyle. Nic bardziej mylnego. Technical Writerzy, jak każda profesja, również mają swoje rozwiązania, które pozwalają im tworzyć, dostarczać i łatwiej utrzymywać profesjonalną dokumentację. W dzisiejszym odcinku przyglądamy się temu z jakich narzędzi mogą skorzystać osoby zajmujące się tworzeniem treści, podsumowujemy ich mocne i słabe strony i staramy się ustalić w jakich sytuacjach najlepiej się sprawdzają. Informacje dodatkowe: Quark XML Author for Microsoft Word: http://www.quark.com/Products/Quark_XML_Author/ Schema ST4: https://www.schema.de/en/ MadCap Flare: https://www.madcapsoftware.com/products/flare/ Help and Manual: https://www.helpandmanual.com/ Adobe RoboHelp: https://www.adobe.com/pl/products/robohelp.html OpenAPI: https://www.openapis.org/ Swagger UI: https://swagger.io/tools/swagger-ui/ ReadMe.io: https://readme.com/ DapperDox: http://dapperdox.io/ easyDITA: https://easydita.com/ Snagit: https://www.techsmith.com/screen-capture.html draw.io: https://www.draw.io/ Inkscape: https://inkscape.org/ GIMP: https://www.gimp.org/ DaVinci Resolve: https://www.blackmagicdesign.com/products/davinciresolve/ Visual Studio Code: https://code.visualstudio.com/ The Jupyter Notebook: https://jupyter.org/ Storybook: https://storybook.js.org/ DocToolHub: https://doctoolhub.com/ StaticGen: https://www.staticgen.com/"
  },
  {
    "href": "blog/2019/7/7/4",
    "title": "#4 Konferencja soap! 2019 - podsumowanie",
    "contents": "soap! to jedyna polska konferencja dla specjalistów zajmujących się szeroko pojętą treścią. Motywem przewodnim tegorocznej edycji było \"Content as code\". W tym odcinku, dzielimy się swoimi ogólnymi wrażeniami na temat konferencji oraz rozmawiamy o prezentacjach, które najbardziej zapadły w nam pamięć. Informacje dodatkowe: Konferencja soap!: http://soapconf.com/ Grupa \"#soapconf & #meetcontent community\" na Facebooku: https://www.facebook.com/groups/372572899591391/ Projekt Kyma: https://kyma-project.io/"
  },
  {
    "href": "blog/2019/8/12/6",
    "title": "#6 Konferencja EuroPython 2019 z perspektywy kodującego Tech Writera",
    "contents": "EuroPython to największa europejska konferencja poświęcona językowi programowania Python. Tegoroczna edycja odbyła się w dniach 8-14 lipca w Bazylei (Szwajcaria). Przyglądamy się temu wydarzeniu z perspektywy Technical Writera, który od jakiegoś czasu korzysta z Pythona w swojej pracy, ale nie jest zawodowym programistą. Rozmawiamy o tym co się działo podczas EuroPython 2019 i czego można było się tam nauczyć. Informacje dodatkowe: Konferencja EuroPython 2019: https://ep2019.europython.eu/ Nagrania wystąpień z EuroPython 2019: https://www.youtube.com/user/PythonItalia Budowanie mechanizmu rekomendacji w Pythonie: https://realpython.com/build-recommendation-engine-collaborative-filtering/ Dekoratory w Pythonie: https://realpython.com/primer-on-python-decorators/ Narzędzie poetry: https://poetry.eustace.io/ \"Modern Python Standard Library Cookbook\", Alessandro Molina: https://www.amazon.com/Modern-Python-Standard-Library-Cookbook/dp/1788830822 Baza danych MongoDB: https://www.mongodb.com/ Konferencja PyCon PL 2019: https://pl.pycon.org/2019/"
  },
  {
    "href": "blog/2019/8/29/7",
    "title": "#7 Programista dokumentuje, czyli nowoczesny technical writing",
    "contents": "W nowoczesnej firmie software’owej nie ma ani jednego Technical Writera. W takim razie czym się zajmuje nasz gość, Rafał Pawlicki, który pracuje jako Documentation Manager? Dynamiczne zmiany w świecie technologii powodują, że coraz częściej w firmach wytwarzających oprogramowanie granice między tradycyjnie zdefiniowanymi rolami zaczynają się zacierać. Nierzadko Tech Writer koduje, a programista dokumentuje. Rozmawiamy o przyszłości Technical Writerów, o tym jak stać się elastycznym specjalistą od treśći i nie zamykać się w silosie oraz mierzymy się ze stereotypami związanymi z podejściem programistów do dokumentacji i z ich postrzeganiem roli Tech Writera. Posłuchajcie! Informacje dodatkowe: Atlassian Confluence: https://www.atlassian.com/pl/software/confluence Sphinx: http://www.sphinx-doc.org/en/master/ Markdown: https://daringfireball.net/projects/markdown/syntax reStructuredText: https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html PyCharm: https://www.jetbrains.com/pycharm/ IntelliJ IDEA: https://www.jetbrains.com/idea/ Rafał Pawlicki (profil LinkedIn): https://pl.linkedin.com/in/rafa%C5%82-pawlicki-973281165"
  },
  {
    "href": "blog/2019/9/28/8",
    "title": "#8 DITA OT - static site generator dla wtajemniczonych",
    "contents": "Jako technoskrybi, którzy kodują, spędziliśmy trochę czasu z DITA Open Toolkit. Rozmawiamy o tym do czego służy DITA OT i jakie ma możliwości. Mówimy o wadach i zaletach. Podpowiadamy też jak zacząć pracę z tym narzędziem. Pracujesz z ditą lub chcesz dowiedzieć się o niej więcej? To jest odcinek dla Ciebie. Informacje dodatkowe: Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Konsorcjum OASIS: https://www.oasis-open.org/ DITA Open Toolkit: https://www.dita-ot.org/ Lightweight DITA: http://docs.oasis-open.org/dita/LwDITA/v1.0/cn01/LwDITA-v1.0-cn01.pdf Extensible Stylesheet Language Transformations (XSLT): https://pl.wikipedia.org/wiki/XSL_Transformations XSL Formatting Objects (FO): https://pl.wikipedia.org/wiki/XSL_Formatting_Objects Syncro Soft: http://www.sync.ro/ Oxygen XML: https://www.oxygenxml.com/ Oxygen Webhelp: https://www.oxygenxml.com/xml_editor/webhelp.html easyDITA: https://easydita.com/ Schematron: http://schematron.com/ Apache Ant: https://ant.apache.org/ Wtyczka Gradle dla DITA OT: https://eerohele.github.io/dita-ot-gradle/ Adobe Experience Manager: https://www.adobe.com/pl/marketing/experience-manager.html Markdown: https://daringfireball.net/projects/markdown/syntax reStructuredText: http://docutils.sourceforge.net/rst.html AsciiDoc: http://asciidoc.org/ Sphinx: http://www.sphinx-doc.org/en/master/ StaticGen: https://www.staticgen.com/"
  },
  {
    "href": "blog/2020/1/20/12",
    "title": "#12 Tech Writer się rekrutuje, czyli jak ważne są umiejętności techniczne",
    "contents": "Czy ogłoszenie o pracę mówi Ci co będziesz robił jako Technical Writer? Jak pracodawca sprawdzi Twoje umiejętności? Co się liczy u Technical Writera? Rozmawiamy z Tomkiem Prusem o blaskach i cieniach rekrutowania Technical Writerów starając się odpowiedzieć na pytanie jak ważne w naszej profesji są umiejętności techniczne."
  },
  {
    "href": "blog/2020/10/18/22",
    "title": "#22 Tech Writer buduje dokumentację API, czyli Next.js, ReDoc i OpenAPI w akcji",
    "contents": "Next.js to framework Reacta, dzięki któremu można w elastyczny sposób tworzyć nowoczesne strony internetowe. Według rankingu na stronie staticgen.com, jest to również jeden z najpopularniejszych generatorów stron statycznych. Rozmawiamy o tym jak można połączyć Next.js z narzędziem ReDoc, żeby zbudować stronę z dokumentacją dla wielu API stworzonych przy pomocy specyfikacji OpenAPI. Zastanawiamy się też jak Next.js może nam się przydać kiedy piszemy dokumentację w standardzie DITA. Informacje dodatkowe: Next.js: https://nextjs.org/ React: https://pl.reactjs.org/ Static Site Generator: https://www.gatsbyjs.com/docs/glossary/static-site-generator/ StaticGen: https://www.staticgen.com/ Docusaurus: https://docusaurus.io/ Gatsby: https://www.gatsbyjs.com/ ReDoc: https://github.com/Redocly/redoc OpenAPI: https://www.openapis.org/ Swagger UI: https://swagger.io/tools/swagger-ui/ swagger-ui-react: https://www.npmjs.com/package/swagger-ui-react Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Wtyczki dla DITA OT: https://www.dita-ot.org/plugins Wtyczka Swagger dla DITA OT: https://github.com/jason-fox/fox.jason.passthrough.swagger"
  },
  {
    "href": "blog/2020/11/23/23",
    "title": "#23 Tech Writer mierzy jakość dokumentacji, czyli co i jak sprawdzać",
    "contents": "Jak zrobić najlepszą dokumentację? Ustalamy wewnętrzne standardy i się ich trzymamy, a potem sprawdzamy czy dokumentacja spełnia swoje cele. Następnie weryfikujemy standardy, żeby nasza dokumentacja spełniała założone cele coraz lepiej. Wydaje się proste, ale diabeł tkwi w szczegółach. Z Rafałem Pawlickim zastanawiamy się jak utrzymywać wewnętrzne standardy jednocześnie ucząc ludzi pisania dobrej dokumentacji oraz w jaki sposób mierzyć efektywność dokumentacji. Rozmawiamy o tym jak stworzyć model oceny dokumentacji pod kątem jakości i dojrzałości, a następnie jak wykorzystać te informacje do planowania pracy dokumentacyjnej. Przyglądamy się też zbieraniu danych od użytkowników oraz wykorzystywaniu ich do wdrażania zmian w organizacji. Które metryki najlepiej sprawdzały się dla nas do tej pory? Które działają najlepiej osobno, a które w połączeniu? Które elementy może sprawdzać automat, a które powinny być weryfikowane przez człowieka? Posłuchajcie, a potem dajcie nam znać jakie Wy macie sposoby i pomysły na mierzenie jakości dokumentacji. Informacje dodatkowe: Hemingway App: http://www.hemingwayapp.com/ LanguageTool: https://languagetool.org/ Readability indices: https://www.analyzemywriting.com/readability_indices.html Konferencja Write the Docs 2020 w Pradze: https://www.writethedocs.org/conf/prague/2020/ \"Organizing a Confluence hoard, or, does this page spark joy?\", Abigail Sutherland: https://www.youtube.com/watch?v=DrGCWTxeA94&list=PLZAeFn6dfHpmRWZJaUwQzsdagW2TtRI2x&index=3 \"The Importance of Using Analytics and Feedback for your Documentation\", Karissa Van Baulen: https://www.youtube.com/watch?v=EkPU2afWPDA&list=PLZAeFn6dfHpmRWZJaUwQzsdagW2TtRI2x&index=13 Google Analytics: https://analytics.google.com/analytics/web/provision/#/provision Google Tag Manager: https://marketingplatform.google.com/about/tag-manager/"
  },
  {
    "href": "blog/2020/12/23/24",
    "title": "#24 Tech Writer publikuje inaczej, czyli API do dokumentacji",
    "contents": "Niektóre sposoby publikowania dokumentacji są znane wśród Tech Writerów od zarania dziejów. Portale serwujące wszelakiej maści treści w formacie HTML czy PDF są niejako standardem branżowym. W sytuacji kiedy odbiorcą dokumentacji jest użytkownik produktu te formy spełniają swoje zadanie. Ale co zrobić kiedy do naszej dokumentacji potrzebuje się dobrać jakaś aplikacja? Na przykład, aplikacja webowa chce wyświetlić dokumentację w panelu, który jest jej integralną cześcią. Możemy wtedy zastosować stary dobry \"iframe\", jednak takie rozwiązanie nie jest zalecane, a do tego stwarza szereg problemów. A może by tak stworzyć API dla dokumentacji i serwować treść za pomocą endpointów? Rozważamy czy takie rozwiązanie jest możliwe, czy ma sens i w jakich sytuacjach mogłoby się sprawdzić. Informacje dodatkowe: Application Programming Interface (API): https://pl.wikipedia.org/wiki/Interfejs_programowania_aplikacji Tag <iframe>: https://www.w3schools.com/tags/tag_iframe.ASP Progressive Web Application: https://en.wikipedia.org/wiki/Progressive_web_application \"Co zmieniają Progressive Web Applications? Wszystko, co musisz wiedzieć o PWA\": https://www.e-point.pl/blog/co-zmieniaja-progressive-web-applications-wszystko-co-musisz-wiedziec-o-pwa Elastic (Elasticsearch, Kibana): https://www.elastic.co/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Adobe FrameMaker: https://pl.wikipedia.org/wiki/Adobe_FrameMaker Markdown: https://daringfireball.net/projects/markdown/syntax Gatsby: https://www.gatsbyjs.com/ GraphQL: https://graphql.org/ React: https://pl.reactjs.org/"
  },
  {
    "href": "blog/2020/2/25/13",
    "title": "#13 Full-Stack Tech Writer, czyli technoskryba kontra chmura",
    "contents": "Jakie są obowiązki Technical Writera? Pewnie większość z Was odpowiedziałaby, że pisanie dokumentacji. A co z budowaniem stron i hostowaniem ich w chmurze? Damy sobie z tym radę? Ten odcinek to nie rozważania teoretyczne, ale oparta na faktach historia o tym jak trzech Technical Writerów ogarnęło cały stack technologiczny i devops dla portalu z dokumentacją. Informacje dodatkowe: Konferencja soap!: http://soapconf.com/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Markdown: https://daringfireball.net/projects/markdown/ DITA Open Toolkit: https://www.dita-ot.org/ Component content management system (CCMS): https://en.wikipedia.org/wiki/Component_content_management_system Node.js: https://nodejs.org/en/ Python: https://www.python.org/ Scrapy: https://scrapy.org/ Jinja2: https://jinja.palletsprojects.com/en/2.11.x/ Sphinx: http://www.sphinx-doc.org/en/master/ Elasticsearch: https://www.elastic.co/ Kubernetes: https://kubernetes.io/"
  },
  {
    "href": "blog/2020/3/24/14",
    "title": "#14 Tech Writer zaczyna kodować w Pythonie, czyli o narzędziach i dobrych praktykach",
    "contents": "Rozmawiamy z Sebastianem Witowskim o tym jak ustawić sobie środowisko do kodowania w Pythonie i jakich błędów unikać zaczynając swoją przygodę z tym językiem programowania. Spora dawka wiedzy dla początkujących Pythonistów. Ale jeśli kodujesz w Pythonie od jakiegoś czasu i chcesz się upewnić, że stosujesz dobre praktyki, to ten odcinek jest też dla Ciebie. Informacje dodatkowe: Python: https://www.python.org/ Intellij IDEA: https://www.jetbrains.com/idea/ PyCharm: https://www.jetbrains.com/pycharm/ Visual Studio Code (VS Code): https://code.visualstudio.com/ Vim: https://www.vim.org/ pyenv: https://github.com/pyenv/pyenv Python venv: https://docs.python.org/3/library/venv.html Python virtualenv: https://virtualenv.pypa.io/en/stable/ Conda: https://docs.conda.io/en/latest/ Node modules: https://www.w3schools.com/nodejs/nodejs_modules.asp Pipenv: https://pipenv.readthedocs.io/en/latest/ Poetry: https://python-poetry.org/ Python Requests: https://2.python-requests.org/en/master/ Django: https://www.djangoproject.com/ Flask: https://flask.palletsprojects.com/en/1.1.x/ EuroPython 2019: https://ep2019.europython.eu/ Cookiecutter: https://cookiecutter.readthedocs.io/en/1.7.0/ Pipx: https://github.com/pipxproject/pipx Black: https://github.com/psf/black npm: https://www.npmjs.com/ npx: https://www.npmjs.com/package/npx \"The Hitchhiker’s Guide to Python!\", Kenneth Reitz, Tanya Schlusser: https://docs.python-guide.org/ Sphinx: http://www.sphinx-doc.org/en/master/ Write the Docs: https://www.writethedocs.org/ Pytest: https://docs.pytest.org/en/latest/ Python unittest: https://docs.python.org/3.8/library/unittest.html Test Driven Development (TDD): https://www.agilealliance.org/glossary/tdd/ Git: https://git-scm.com/ Warsztat \"Modern Python Developer's Toolkit\": https://www.meetup.com/Pykonik/events/268809734/ Pykonik, Kraków Python User Group: https://www.meetup.com/Pykonik/ Profil Sebastiana na LinkedIn: https://www.linkedin.com/in/switowski/ Profil Sebastiana na Twitterze: https://twitter.com/SebaWitowski Strona Sebastiana: https://switowski.com/"
  },
  {
    "href": "blog/2020/4/22/16",
    "title": "16# DITA z Gita",
    "contents": "Czy szanujący się zespół dokumentacyjny używający standardu DITA może działać bez CCMSa? Czy Technical Writer odnajdzie się w gicie? Jakie wyzwania stwarza taka implementacja? Techniczna rozmowa o technical writingu. Informacje dodatkowe: Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Component Content Management System (CCMS): https://en.m.wikipedia.org/wiki/Component_content_management_system DITA Open Toolkit: https://www.dita-ot.org/ Git: https://git-scm.com/ DITA for Small Teams: http://www.d4st.org/ Python: https://www.python.org/ IntelliJ IDEA: https://www.jetbrains.com/idea/ Poetry: https://python-poetry.org/ Gradle: https://gradle.org/ Lightweight DITA: http://docs.oasis-open.org/dita/LwDITA/v1.0/cn01/LwDITA-v1.0-cn01.pdf Oxygen XML: https://www.oxygenxml.com/ Schematron: http://schematron.com/ Apache Ant: https://ant.apache.org/ Extensible Stylesheet Language Transformations (XSLT): https://pl.wikipedia.org/wiki/XSL_Transformations Pytest: https://docs.pytest.org/en/latest/ Git submodules: https://git-scm.com/book/en/v2/Git-Tools-Submodules Continuous integration (CI): https://en.m.wikipedia.org/wiki/Continuous_integration TeamCity: https://www.jetbrains.com/teamcity/ npm: https://www.npmjs.com/ Docker: https://www.docker.com/ Bitbucket: https://bitbucket.org/ Progressive Web Apps: https://web.dev/what-are-pwas/ Prince XML: https://www.princexml.com/"
  },
  {
    "href": "blog/2020/4/7/15",
    "title": "#15 Technoskryby potyczki z SME, czyli jak zdobywać informacje potrzebne do tworzenia dokumentacji",
    "contents": "Jak Technical Writer radzi sobie ze zdobywaniem informacji? Co jeśli Subject Matter Expert (SME) jest niedostępny? A co jeśli dwóch SME nie może się zgodzić co jest najważniejsze? Rozmawiamy z Mateuszem Boryckim, który przynosi cztery prawdziwe historie (case studies) z życia Technical Writera."
  },
  {
    "href": "blog/2020/5/18/17",
    "title": "#17 Webhelp kontra Progressive Web App",
    "contents": "Offline help, który sam się aktualizuje. Czy to w ogóle możliwe? Zastanawiamy się czy webhelp czasy świetności ma już za sobą i czy Progressive Web App (PWA) ma szansę zostać nowym królem helpów. Informacje dodatkowe: HTML Help: https://pl.wikipedia.org/wiki/HTML_Help \"About Webhelp Output\" (pomoc MadCap Flare 2017r3): https://help.madcapsoftware.com/flare2017r2/Content/Output/Flare/WebHelp-Output/About-WebHelp-Output.htm Progressive Web Application: https://en.wikipedia.org/wiki/Progressive_web_application \"Co zmieniają Progressive Web Applications? Wszystko, co musisz wiedzieć o PWA\": https://www.e-point.pl/blog/co-zmieniaja-progressive-web-applications-wszystko-co-musisz-wiedziec-o-pwa Oxygen Webhelp: https://www.oxygenxml.com/xml_editor/webhelp.html"
  },
  {
    "href": "blog/2020/6/9/18",
    "title": "#18 Wyboista droga do kodowania",
    "contents": "Przejście od zera do kodującego Tech Writera to dość długa droga, i nie zawsze usłana różami. Jednak przy odpowiedniej motywacji i podejściu można podołać temu wyzwaniu. Rozmawiamy o tym jak zacząć naukę kodowania, przez jakie etapy trzeba przejść i jak radzić sobie z problemami i pułapkami. Informacje dodatkowe: Why Learning To Code Is So Damn Hard: https://www.thinkful.com/blog/why-learning-to-code-is-so-damn-hard/ Skillshare: https://www.skillshare.com/ Codecademy: https://codecademy.dev/ Stack Overflow: https://stackoverflow.com/"
  },
  {
    "href": "blog/2020/7/8/19",
    "title": "#19 Tech Writer pracuje zdalnie, czyli jak to się robi w GitLabie",
    "contents": "Trwająca od kilku miesięcy sytuacja spowodowała, że biura zostały pozamykane a praca zdalna z dnia na dzień stała się nowym standardem. Jednak istnieją też takie firmy, które już na wczesnym etapie rozwoju podjęły świadomą decyzję, że postawią na model pracy bez tradycyjnych biur. O byciu w pełni zdalnym Technical Writerem rozmawiamy z Marcinem Sędłakiem-Jakubowskim z firmy GitLab. Pytamy o procesy, narzędzia, budowanie relacji i staramy się ustalić czy jest w tym wszystkim jakiś haczyk. Informacje dodatkowe: About GitLab: https://about.gitlab.com GitLab Handbook: https://about.gitlab.com/handbook/ GitLab Unfiltered: https://www.youtube.com/channel/UCMtZ0sc1HHNtGGWZFDRTh5A All-Remote Meetings: https://about.gitlab.com/company/culture/all-remote/meetings/ Creating GitLab’s remote playbook: https://changelog.com/podcast/397 Visual Studio Code: https://code.visualstudio.com/ Manjaro Linux: https://manjaro.org/ Vale: https://errata-ai.github.io/vale/ Vim: https://www.vim.org/ Nanoc: https://nanoc.ws/"
  },
  {
    "href": "blog/2020/8/6/20",
    "title": "#20 Tech Writer optymalizuje, czyli web performance w dokumentacji",
    "contents": "Wydajność to temat rzadko poruszany w tech writingu, pomimo tego, że webowa forma dokumentacji jest bardzo popularna. Czy szybkość ładowania stron ma znaczenie dla naszych odbiorców? A jeśli tak, to czy Tech Writer ma jakiś wpływ na wydajność dokumentacji? Rozmawiamy o tym jak mierzyć i poprawiać web performance. Zastanawiamy się co może zrobić w tej kwestii Tech Writer, a co musi wdrożyć programista lub inżynier DevOps. Wreszcie rozmawiamy o tym, że w dokumentacji performance to nie wszystko. Informacje dodatkowe: Web performance: https://en.wikipedia.org/wiki/Web_performance \"How to Improve Your Page Load Speed by 70.39% in 45 Minutes\": https://www.ventureharbour.com/improving-site-speed/ TinyPNG: https://tinypng.com/ ImageMagick: https://imagemagick.org/index.php Gzip: https://www.gnu.org/software/gzip/ Chunking w standardzie DITA: https://docs.oasis-open.org/dita/v1.2/os/spec/archSpec/chunking.html Minifikacja: https://pl.wikipedia.org/wiki/Minifikacja HTTP caching: https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching WordPress: https://wordpress.com \"What Are Static Site Generators?\": https://www.netguru.com/blog/what-are-static-site-generators Google PageSpeed Insights: https://developers.google.com/speed/pagespeed/insights/ Google Lighthouse: https://developers.google.com/web/tools/lighthouse Docusaurus: https://docusaurus.io/"
  },
  {
    "href": "blog/2020/9/15/21",
    "title": "#21 Tech Writer zbiera informacje ze stron, czyli jak można wykorzystać web scraping",
    "contents": "Web scraping to zbieranie danych ze stron internetowych. Google, na przykład, robi to, żeby indeksować cały internet w swojej wyszukiwarce. Web scraping wykorzystuje się też do monitorowania cen w konkurencyjnych sklepach internetowych. U nas w firmie używamy web scrapingu, żeby indeksować dokumentację dla naszej wyszukiwarki. To samo rozwiązanie wykorzystujemy też, żeby sprawdzać czy wszystkie linki działają. Wyniki web scrapingu zapisujemy w Elasticsearchu, a potem analizujemy je za pomocą raportów i filtrów w Kibanie. Dzięki temu stworzyliśmy zalążek panelu kontrolnego, na którym widać aktualną jakość naszej dokumentacji. W niedalekiej przyszłości chcemy rozszerzyć nasze rozwiązanie o dodatkowe funkcje. Planujemy, na przykład, testować strony pod kątem wymaganych elementów i zgodności z regułami naszego style guide’a. Kolejną opcją jest sprawdzanie czy w treści nie ma błędów gramatycznych i stylistycznych oraz czy język, którego używamy do tworzenia instrukcji jest wystarczająco przejrzysty. Co można jeszcze zrobić za pomocą web scrapingu? Jakie inne testy są potrzebne w świecie dokumentacji technicznej i pisania ustrukturyzowanego? Zapraszamy do słuchania. Informacje dodatkowe: Web scraping: https://en.wikipedia.org/wiki/Web_scraping Scrapy: https://scrapy.org/ Elastic (Elasticsearch, Kibana): https://www.elastic.co/ curl: https://curl.haxx.se/ Textstat: https://github.com/shivam5992/textstat spaCy: https://spacy.io/ Selenium: https://www.selenium.dev/ TestCafe: https://devexpress.github.io/testcafe/ Vale: https://github.com/errata-ai/vale"
  },
  {
    "href": "blog/2021/1/21/25",
    "title": "#25 Tech Writer koduje w dokumentacji, czyli Markdown w wersji rozszerzonej",
    "contents": "Markdown to prosty i lekki język znaczników, który w ostatnich latach zyskał sporą popularność, szczególnie w świecie dokumentacji dla programistów. Pozwala nam on łatwo i szybko stworzyć tekst, a następnie opublikować go jako HTML. Z biegiem czasu pojawiły się różne odmiany i rozszerzenia Markdowna, pozwalające wycisnąć z niego jeszcze więcej. Jednym z nich jest MDX, który pozwala na używanie bezpośrednio w tekście elementów JSX. Takie rozwiązanie otwiera przed nami nowe możliwości, jak na przykład opcję umieszczenia w dokumentacji interaktywnej próbki kodu. Dzięki temu możemy przesunąć naszą dokumentację na wyższy poziom. Rozmawiamy o tym czym jest MDX, jakie daje nam możliwości i w jakich sytuacjach może nam się przydać. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Markdown: https://daringfireball.net/projects/markdown/syntax MDX: https://mdxjs.com/ Wprowadzenie do JSX: https://pl.reactjs.org/docs/introducing-jsx.html React: https://pl.reactjs.org/ \"What is a Static Site Generator? And 3 ways to find the best one\": https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/ Docusaurus v2: https://v2.docusaurus.io/ Gatsby: https://www.gatsbyjs.com/ Next.js: https://nextjs.org/ Create React app: https://github.com/facebook/create-react-app Carbon React: https://react.carbondesignsystem.com/ React Bootstrap: https://react-bootstrap.github.io/ Swagger UI: https://swagger.io/tools/swagger-ui/ webpack: https://webpack.js.org/"
  },
  {
    "href": "blog/2021/10/26/35",
    "title": "#35 Tech Writer chce kodować więcej",
    "contents": "Czy Tech Writer, który trochę koduje może kodować więcej? Jakie ma opcje rozwoju zawodowego jeśli interesują go głównie skrypty, narzędzia i inne techniczne aspekty tworzenia dokumentacji? Bazując na własnych doświadczeniach, rozważamy trzy możliwe scenariusze dla technoskrybów z zapędami programistycznymi. Pojawia się też kilka czerstwych żartów i nawiązań do zamierzchłych czasów. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Python: https://www.python.org/ MadCap Flare: https://www.madcapsoftware.com/products/flare/ Visual Basic for Applications: Perl: https://www.perl.org/ Arbortext: https://www.ptc.com/en/products/arbortext Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture DITA Open Toolkit: https://www.dita-ot.org/ Front-end i back-end: https://pl.wikipedia.org/wiki/Front-end_i_back-end gulp.js: https://gulpjs.com/ React: https://pl.reactjs.org/ Svelte: https://svelte.dev/ Teleturniej \"Idź na całość\": https://pl.wikipedia.org/wiki/Id%C5%BA_na_ca%C5%82o%C5%9B%C4%87 Telegazeta: https://pl.wikipedia.org/wiki/Telegazeta"
  },
  {
    "href": "blog/2021/10/31/36",
    "title": "#36 Tech Writer się boi, czyli Halloween Special 2021",
    "contents": "Wszyscy czegoś się boją. Zdarza się, że nawiedzają nas koszmary i zjawy z przeszłości. Tech Writerzy nie są pod tym względem wyjątkiem. Mają swoje, nierzadko osobliwe, strachy. Z okazji Halloween rozmawiamy o tym czego boi się technoskryba i co nie daje mu spać po nocach. Uwaga: odcinek tylko dla ludzi o mocnych nerwach! Informacje dodatkowe: Grupa \"Tworzenie dokumentacji\" na Facebooku: https://www.facebook.com/groups/tworzeniedokumentacji Microsoft Word: https://www.microsoft.com/pl-pl/microsoft-365/word \"Clippy\": https://en.wikipedia.org/wiki/Office_Assistant Subversion (SVN): https://subversion.apache.org/ Git: https://git-scm.com/ \"Using Branches\": https://svnbook.red-bean.com/en/1.7/svn.branchmerge.using.html Gif \"Git merge\": https://gifer.com/en/7h7L Git Cherry Pick: https://www.atlassian.com/git/tutorials/cherry-pick Sphinx: https://www.sphinx-doc.org/en/master/ Jamstack: https://jamstack.org/ Python: https://www.python.org/ \"What is a Static Site Generator? And 3 ways to find the best one\": https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/ \"Simplified User Interface: The Beginner’s Guide\": https://www.techsmith.com/blog/simplified-user-interface/ \"Rethink your screenshots and tutorials with a SUI\", Anton Bollen: https://www.youtube.com/watch?v=hbT5U63uKkg Micromanagement: https://en.wikipedia.org/wiki/Micromanagement Film \"Kingsajz\": https://pl.wikipedia.org/wiki/Kingsajz \"Writing is like sorting laundry -- practical advice for tackling documentation projects\": https://idratherbewriting.com/2015/01/29/writing-is-like-sorting-laundry-practical-advice-for-tackling-documentation-projects/ Podręcznik stylu (style guide): http://techwriter.pl/podrecznik-stylu-stylrecznik/ TeamCity: https://www.jetbrains.com/teamcity/ Docker: https://www.docker.com/ bash: https://pl.wikipedia.org/wiki/Bash Syndrom oszusta: https://pl.wikipedia.org/wiki/Syndrom_oszusta OpenID Connect: https://openid.net/connect/ OAuth 2.0: https://oauth.net/2/ JWT (JSON Web Tokens): https://jwt.io/ Serial comma/Oxford comma: https://en.wikipedia.org/wiki/Serial_comma Stack Overflow: https://stackoverflow.com/ \"The One Where Ross Got High\", Friends: https://en.wikipedia.org/wiki/The_One_Where_Ross_Got_High"
  },
  {
    "href": "blog/2021/12/6/37",
    "title": "#37 Tech Writer potrzebuje więcej dynamiki, czyli zbyt statyczne strony z dokumentacją",
    "contents": "Dostarczanie statycznych stron z dokumentacją ostatnimi czasy wraca do łask. Prawdopodobnie dlatego, że takie strony są szybkie, bezpieczne i łatwe w serwowaniu. Jednak w niektórych sytuacjach mogą nas też ograniczać i sprawiać, że aktualizowanie ich zawartości staje się czasochłonne i problematyczne. Rozmawiamy o tym kiedy strony stają się zbyt statyczne i jak można temu zaradzić. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Strona statyczna (static site): https://slownik.intensys.pl/definicja/strona-statyczna/ Serwer aplikacji: https://pl.wikipedia.org/wiki/Serwer_aplikacji Aplikacja internetowa/webowa: https://pl.wikipedia.org/wiki/Aplikacja_internetowa DITA Open Toolkit: https://www.dita-ot.org/ Docusaurus: https://docusaurus.io/ Hugo: https://gohugo.io/ Gatsby: https://www.gatsbyjs.com/ Continuous Integration (CI)/Continuous Deployment (CD): https://en.wikipedia.org/wiki/CI/CD \"Git Branch\": https://www.atlassian.com/git/tutorials/using-branches Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Markdown: https://daringfireball.net/projects/markdown/syntax Adobe FrameMaker: https://en.wikipedia.org/wiki/Adobe_FrameMaker Oxygen XML Webhelp Responsive: https://www.oxygenxml.com/doc/versions/24.0/ug-webhelp-responsive/ Next.js: https://nextjs.org/ Node.js: https://nodejs.org/en/ Express.js: https://expressjs.com/ WordPress: https://wordpress.com/"
  },
  {
    "href": "blog/2021/2/10/26",
    "title": "#26 Tech Writerzy dokumentują API",
    "contents": "Pisanie dokumentacji do API to dziedzina sama w sobie, która w dzisiejszych czasach zyskuje na znaczeniu. Przyspieszony rozwój technologii cyfrowych w dobie pandemii i pracy zdalnej podniósł znaczenie dokumentacji w ogóle, a dokumentacji do API w szczególności. Z naszymi gośćmi, Jadwigą Sitnicką z LogMeIn, Mateuszem Wiktorem z PubNub i Pawłem Krentowskim z Ocado Technology, rozmawiamy m.in. o tym z jakich elementów składa się dokumentacja do API, kto i w jaki sposób tworzy poszczególne części, jakie są najczęstsze problemy i wyzwania podczas tworzenia tego typu dokumentacji oraz jakie narzędzia warto znać. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Application Programming Interface (API): https://pl.wikipedia.org/wiki/Interfejs_programowania_aplikacji LogMeIn: https://www.logmein.com/ Ocado Technology: https://www.ocadogroup.com/technology/technology-pioneers PubNub: https://www.pubnub.com/ \"The State of API Report 2020\": https://smartbear.com/resources/ebooks/the-state-of-api-2020-report/ Markdown: https://daringfireball.net/projects/markdown/syntax ReadMe.io: https://readme.com/ Stoplight Studio: https://stoplight.io/studio/ OpenAPI: https://www.openapis.org/ Swagger UI: https://swagger.io/tools/swagger-ui/ ReDoc: https://github.com/Redocly/redoc Jekyll: https://jekyllrb.com/ GitLab: https://about.gitlab.com/ curl: https://curl.se/ Postman: https://www.postman.com/ Visual Studio Code: https://code.visualstudio.com/ Software Development Kit (SDK): https://pl.wikipedia.org/wiki/Software_development_kit Integrated Development Environment (IDE): https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne \"Wstęp do REST API\": https://devszczepaniak.pl/wstep-do-rest-api/ Grupa \"Tworzenie dokumentacji\" na Facebooku: https://www.facebook.com/groups/tworzeniedokumentacji"
  },
  {
    "href": "blog/2021/2/17/27",
    "title": "#27 Tech Writer szkoli się z Pythona",
    "contents": "Chcesz lepiej rozumieć kod, który opisujesz? Chcesz zautomatyzować żmudne aspekty swojej pracy? Chcesz móc powiedzieć śmiało i dumnie - znam Pythona? W tym odcinku rozmawiamy z Adrianem Gonciarzem, który prowadzi szkolenia z Pythona dla tech writerów i testerów, oraz Basią Czyż, technical writerką, która wzięła udział w tym szkoleniu. Szkolenie odbyło się w pełni online i składało się z dwugodzinnych bloków trzy razy w tygodniu. W jego toku, uczestnicy stworzyli dwa projekty i nauczyli się solidnych podstaw Pythona. Od naszych gości dowiadujemy się jak szkolenie wygląda od kulis oraz jaką wiedzę można z niego wynieść. Dostajemy opinię organizatora i uczestnika, a przy tym jesteśmy świadkami bardzo ciekawej dyskusji o roli kodowania w pracy technical writera oraz o przyszłości tego zawodu. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Szkolenie \"Python for Testers and Technical Writers\": https://dredar.com/services/trainings-and-workshops/python-for-testers-and-technical-writers Site Reliability Engineering (SRE): https://en.wikipedia.org/wiki/Site_reliability_engineering DREDAR: https://dredar.com/ Techwriter.pl: http://techwriter.pl/ \"Tech Writer koduje w Pythonie. Przewodnik szybkiego startu\": https://techwriterkoduje.pl/docs/teoria \"Automate the Boring Stuff with Python\": https://automatetheboringstuff.com/ \"The PEP 8 Song\", Leon Sandoy: https://www.youtube.com/watch?v=hgI0p1zf31k \"PEP 20 - The Zen of Python\": https://www.python.org/dev/peps/pep-0020/ Sebastian Witowski, Python consultant and trainer: https://switowski.com/"
  },
  {
    "href": "blog/2021/3/22/28",
    "title": "#28 Tech Writer wybiera narzędzie do kodowania, czyli VS Code kontra IntelliJ IDEA",
    "contents": "Co jest lepsze do pisania kodu - komercyjne środowisko programistyczne czy darmowy edytor kodu źródłowego? Czy takie porównanie w ogóle ma sens? Michał na co dzień pracuje w IntelliJ IDEA, a Paweł, jak spora część programistów, w VS Code. W tej subiektywnej rozmowie na bardzo subiektywny temat nie staramy się rozstrzygnąć, która aplikacja jest lepsza. Zamiast tego opowiadamy o tym dlaczego zaczęliśmy używać właśnie tych rozwiązań, co w nich lubimy, a co nam przeszkadza i w jakich sytuacjach według nas najlepiej się sprawdzają. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Stack Overflow Developer Survey 2019: https://insights.stackoverflow.com/survey/2019 Stack Overflow Developer Survey 2020: https://insights.stackoverflow.com/survey/2020 Visual Studio (VS) Code: https://code.visualstudio.com/ IntelliJ IDEA: https://www.jetbrains.com/idea/ IntelliJ IDEA - porównanie wersji Ultimate i Community: https://www.jetbrains.com/idea/features/editions_comparison_matrix.html Zintegrowane środowisko programistyczne (IDE): https://pl.wikipedia.org/wiki/Zintegrowane_%C5%9Brodowisko_programistyczne Edytor kodu źródłowego: https://pl.wikipedia.org/wiki/Edytor_kodu_%C5%BAr%C3%B3d%C5%82owego IDEs vs Code Editors: https://realpython.com/lessons/ides-vs-code-editors/ JavaScript: https://developer.mozilla.org/pl/docs/Web/JavaScript Cascading Style Sheets (CSS): https://developer.mozilla.org/pl/docs/Learn/Getting_started_with_the_web/CSS_basics React: https://pl.reactjs.org/ Node.js: https://nodejs.org/en/ Python: https://www.python.org/ Kotlin: https://kotlinlang.org/ Java: https://java.com/en/ TeamCity: https://www.jetbrains.com/teamcity/ Docker: https://www.docker.com/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Prettier: https://prettier.io/ Szkolenie \"Modern Python Projects\", Sebastian Witowski: https://training.talkpython.fm/courses/modern-python-projects PyCharm: https://www.jetbrains.com/pycharm/ Language Server Protocol: https://en.wikipedia.org/wiki/Language_Server_Protocol Vim: https://pl.wikipedia.org/wiki/Vim VSCodium: https://vscodium.com/"
  },
  {
    "href": "blog/2021/4/8/29",
    "title": "#29 Tech Writer koduje według dobrych praktyk",
    "contents": "Pewnego dnia czujesz nieodpartą chęć napisania jakiegoś skryptu. Otwierasz edytor, tworzysz nowy plik i w pocie czoła dodajesz kolejne linijki kodu. Zachowujesz zmiany, wprowadzasz poprawki, weryfikujesz swoje dzieło i powtarzasz cały proces aż po pewnym czasie udaje Ci się doprowadzić skrypt do stanu, w którym robi to co chcesz. Cel osiągnięty. Niby tak, ale czy taki sposób tworzenia kodu jest właściwy? Rozmawiamy o dobrych praktykach, które kodujący Tech Writer może wdrożyć, żeby łatwiej tworzyć, utrzymywać, zmieniać, ulepszać i udostępniać swoje skrypty i aplikacje. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Notepad++: https://notepad-plus-plus.org/ Visual Studio (VS) Code: https://code.visualstudio.com/ Git: https://git-scm.com/ Bitbucket: https://bitbucket.org/ GitHub: https://github.com/ GitLab: https://about.gitlab.com/ Pull request w Bitbucket: https://www.atlassian.com/git/tutorials/making-a-pull-request Subversion (SVN): https://pl.wikipedia.org/wiki/Subversion Test-driven development: https://pl.wikipedia.org/wiki/Test-driven_development DITA Open Toolkit: https://www.dita-ot.org/ Lint: https://en.wikipedia.org/wiki/Lint_ (software) Sourcery: https://sourcery.ai/ PyCharm: https://www.jetbrains.com/pycharm/ IntelliJ IDEA: https://www.jetbrains.com/idea/ Cyclomatic complexity: https://en.wikipedia.org/wiki/Cyclomatic_complexity Wily: https://wily.readthedocs.io/en/latest/ Programowanie funkcyjne: https://pl.wikipedia.org/wiki/Programowanie_funkcyjne"
  },
  {
    "href": "blog/2021/5/19/30",
    "title": "#30 Tech Writer radzi sobie ze sprzężeniem zwrotnym, czyli feedback do dokumentacji",
    "contents": "Naszą dokumentację możemy poprawić tylko wtedy jeśli wiemy jakie kryją się w niej problemy. Warto zbierać i analizować dane od użytkowników, a przede wszystkim pytać ich o opinię. Nie jest to bynajmniej proste zadanie, dlatego połączyliśmy siły z Rafałem Pawlickim, żeby porozmawiać o celach, sposobach, wyzwaniach i dobrych praktykach związanych z procesem zbierania informacji na temat dokumentacji od użytkowników. Staramy się też odpowiedzieć na odwieczne pytanie - jaki jest najlepszy polski odpowiednik słowa \"feedback\"? Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: \"Feedback\" w Słowniku Języka Polskiego: https://sjp.pl/feedback Bounce rate: https://support.google.com/analytics/answer/1009409?hl=en \"Docs as code\", Write the Docs: https://www.writethedocs.org/guide/docs-as-code/ Dokumentacja Microsoft: https://docs.microsoft.com/ Usability Testing: https://en.wikipedia.org/wiki/Usability_testing \"Meet Content po raz pierwszy - relacja\": http://techwriter.pl/meet-content-po-raz-pierwszy-relacja/ Card sorting: https://en.wikipedia.org/wiki/Card_sorting Yandex Metrica: https://metrica.yandex.com/ \"What is an Exit Page? (And How to View it in Google Analytics)\": https://www.monsterinsights.com/what-is-an-exit-page-and-how-to-view-it-in-google-analytics/ Atlassian Jira: https://www.atlassian.com/software/jira Google Forms: https://www.google.com/forms/about/ SurveyMonkey: https://www.surveymonkey.com/ \"Wyniki badania płac w komunikacji technicznej 2020\": http://techwriter.pl/wyniki-badania-plac-w-komunikacji-technicznej-2020/ Rafał Pawlicki (profil LinkedIn): https://pl.linkedin.com/in/rafa%C5%82-pawlicki-973281165"
  },
  {
    "href": "blog/2021/7/29/32",
    "title": "#32 Tech Writer zatrudnia asystenta, czyli sztuczna inteligencja w służbie dokumentacji",
    "contents": "Od dawna mówi się o tym, że maszyny zastąpią ludzi i zajmą ich miejsce jako korona stworzenia. Jednak zanim to nastąpi, możemy wykorzystać sztuczną inteligencję do własnych celów. Przyglądamy się obecnie dostępnym modelom językowym, a szczególnie GPT-3, rozmawiamy o tym co potrafią i rozważamy jak można by je wykorzystać w tworzeniu dokumentacji technicznej. Czy kodujący Tech Writer może zrobić ze sztucznej inteligencji swojego asystenta? Co mógłby robić taki asystent? Co jest najbardziej wartościowe w pracy Tech Writera, a które obowiązki warto cedować na algorytmy? Jak praktycznie się za to zabrać? Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Sztuczna inteligencja: https://pl.wikipedia.org/wiki/Sztuczna_inteligencja Generative Pre-trained Transformer 3 (GPT-3): https://en.wikipedia.org/wiki/GPT-3 OpenAI: https://openai.com/ \"#9 Robot dokumentuje, czyli technical writing przyszłości\": https://techwriterkoduje.pl/blog/2019/10/17/robot-dokumentuje \"#11 Robot dokumentuje część 2 - automatyzacja kontra ludzie\": https://techwriterkoduje.pl/blog/2019/12/12/robot-dokumentuje-czesc-2 Layout generator: https://twitter.com/sharifshameem/status/1282676454690451457?s=20 Natural Language Shell: https://beta.openai.com/?app=productivity&example=4_2_0 Summarization: https://beta.openai.com/?app=content-consumption&example=5_2_0 Semantic search: https://beta.openai.com/?example=0_2_0 GitHub Copilot: https://copilot.github.com/ \"Copilot writes a text-based game in Python\": https://sandyuraz.com/blogs/copilot-game/ Pamięć tłumaczeniowa: https://pl.wikipedia.org/wiki/Pami%C4%99%C4%87_t%C5%82umaczeniowa \"Dear Mr. Robot\", Marta Bartnicka & Wojciech Froelich (soap! 2018): https://www.youtube.com/watch?v=Q_if0yBogUQ Techwriter.pl: http://techwriter.pl/ \"Going from A to C, a Practical Approach to Semantic Search\", Paweł Kowaluk: https://www.slideshare.net/PawelKowaluk/semantic-search-40766546 Repozytorium GPT-2 na GitHub: https://github.com/openai/gpt-2"
  },
  {
    "href": "blog/2021/7/3/31",
    "title": "#31 Prosty jak budowa cepa, czyli Tech Writer tworzy generator stron statycznych",
    "contents": "Generatorów stron statycznych jest całkiem sporo. Jednak nie jest to powód, dla którego Tech Writer miałby zrezygnować ze stworzenia swojego. A że technoskryba z natury lubi prostotę i przejrzystość to generator też musi mieć takie cechy. Rozmawiamy o tym dlaczego zdecydowaliśmy się na stworzenie własnego rozwiązania, jakiej technologii użyliśmy, co nam to dało i czy było to warte zachodu. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Node.js: https://nodejs.org/ Express.js: https://expressjs.com/ Embedded JavaScript Templates (EJS): https://ejs.co/ Static Site Generator: https://www.gatsbyjs.com/docs/glossary/static-site-generator/ React: https://pl.reactjs.org/ Hydration (web development): https://en.wikipedia.org/wiki/Hydration_ (web_development) Docusaurus: https://docusaurus.io/ Next.js: https://nextjs.org/ Python: https://www.python.org/ The Python Standard Library: https://docs.python.org/3/library/ Jinja: https://jinja.palletsprojects.com/en/3.0.x/ Template strings w Pythonie: https://docs.python.org/3/library/string.html#template-strings JSON Schema: https://json-schema.org/"
  },
  {
    "href": "blog/2021/8/18/33",
    "title": "#33 Kodować każdy może, czyli o Akademii Motorola Solutions słów kilka",
    "contents": "Czy w kilka miesięcy można nauczyć się kodowania i zostać zatrudnionym jako młodszy programista w międzynarodowej korporacji? Dzięki Akademii Motorola Solutions taki scenariusz jest możliwy. Na początku sierpnia 2021 wystartowała druga edycja tego programu szkoleniowego stworzonego dla osób, które marzą o zmianie kariery i wejściu do świata IT. W tym odcinku rozmawiamy z Jackiem Drabikiem, prezesem Motorola Solutions w Polsce, oraz Klaudią Rydzanicz i Pawłem Kózką, uczestnikami pierwszej edycji Akademii, m.in. o tym kto może wziąć udział w programie oraz jak wygląda rekrutacja i proces przygotowania do nowego zawodu. Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: O Akademii: https://pracawmotoroli.pl/o-akademii/"
  },
  {
    "href": "blog/2021/9/7/34",
    "title": "#34 Tech Writer dokumentuje, testuje, koduje, lokalizuje i projektuje, czyli człowiek renesansu w dokumentacji",
    "contents": "Czym na co dzień zajmuje się Technical Writer? A może lepiej zapytać czym się nie zajmuje? Patrycja Pyrek studiuje informatykę i ekonometrię, uczy języka japońskiego i jednocześnie jako stażystka zdobywa techwriterskie doświadczenie. Ta różnorodność zainteresowań przejawia się również podczas jej stażu. Patrycja, poza tworzeniem dokumentacji, ma jeszcze szereg innych zadań, które pozwalają jej się rozwijać w obszarach testowania, lokalizacji i projektowania. Zresztą posłuchajcie sami! Muzyka w intro oraz dźwięki pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 . Informacje dodatkowe: Selenium WebDriver: https://www.selenium.dev/documentation/webdriver/ Protractor: https://www.protractortest.org/ AngularJS: https://angularjs.org/ OpenAPI: https://www.openapis.org/"
  },
  {
    "href": "blog/2022/1/10/38",
    "title": "#38 Tech Writer walczy z hakerami, czyli jak zadbać o bezpieczeństwo dokumentacji",
    "contents": "Stare porzekadło \"Tańcz jakby nikt nie patrzył\" niestety nie sprawdzi się w kontekście dokumentacji. Tech Writer powinien raczej stosować zasadę \"Szyfruj wszystko tak jakby cały świat chciał przeczytać to co masz do ukrycia\". Z Mateuszem Olejarką, specjalistą w zakresie bezpieczeństwa aplikacji webowych, rozmawiamy o tym na co powinniśmy zwracać uwagę w procesie tworzenia dokumentacji, żeby była ona bezpieczna. Dowiecie się gdzie czyhają potencjalne zagrożenia i jak sobie z nimi radzić. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Amazon S3: https://aws.amazon.com/s3/ \"README.md, czyli historia zbyt pomocnego pliku\", Techwriter.pl: http://techwriter.pl/readme-md-czyli-historia-zbyt-pomocnego-pliku/ SmartDeblur: http://smartdeblur.net/ Fake Name Generator: https://www.fakenamegenerator.com/ DumpsterDiver: https://github.com/securing/DumpsterDiver MD5: https://pl.wikipedia.org/wiki/MD5 \"Security agencies leak sensitive data by failing to sanitize PDF files\": https://therecord.media/security-agencies-leak-sensitive-data-by-failing-to-sanitize-pdf-files/ FOCA (Fingerprinting Organizations with Collected Archives): https://github.com/ElevenPaths/FOCA \"FBI used Instagram, an Etsy review, and LinkedIn to identify a protestor accused of arson\": https://www.theverge.com/2020/6/18/21295301/philadelphia-protester-arson-identified-social-media-etsy-instagram-linkedin \"What is typosquatting and how typosquatting attacks are responsible for malicious modules in npm\": https://snyk.io/blog/typosquatting-attacks/ Cross Site Scripting (XSS): https://owasp.org/www-community/attacks/xss/ Wayback Machine: https://web.archive.org/ Okta: https://www.okta.com/ Single Page Application (SPA): https://pl.wikipedia.org/wiki/Single_Page_Application JSON Web Token (JWT): https://jwt.io/ Non-disclosure agreement (NDA): https://en.wikipedia.org/wiki/Non-disclosure_agreement Kevin Mitnick: https://en.wikipedia.org/wiki/Kevin_Mitnick Profil Mateusza Olejarki na LinkedIn: https://pl.linkedin.com/in/molejarka"
  },
  {
    "href": "blog/2022/10/13/47",
    "title": "#47 Tech Writer zgłębia tajniki dostępności cyfrowej, czyli jak tworzyć dokumentację dla wszystkich",
    "contents": "W dzisiejszych czasach, stworzenie strony internetowej jest dość łatwe i szybkie. Jednak stworzenie strony internetowej, która spełnia wymogi dostępności cyfrowej to zupełnie inna bajka. Tutaj potrzebna jest już odpowiednia wiedza, umiejętności oraz znajomość przepisów. Dlatego zaprosiliśmy Dawida Górnego, Kacpra Mikockiego i Tomasza Boniora z firmy Accens, żeby opowiedzieli nam o tym czym jest dostępność, jak o nią zadbać, jak ją testować, jakie narzędzia mogą nam pomóc w wykrywaniu potencjalnych problemów i w jaki sposób technokrybowie mogą sprawić, że ich dokumentacja będzie przyjazna dla każdego. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Accens: https://accens.io/ Dostępność (projektowanie), Wikipedia: https://pl.wikipedia.org/wiki/Dost%C4%99pno%C5%9B%C4%87_ (projektowanie) \"Czym jest dostępność cyfrowa? Na czym polega?\", Accens: https://accens.io/blog/pl/dostepnosc-cyfrowa-definicja/ Używalność (informatyka), Wikipedia: https://pl.wikipedia.org/wiki/U%C5%BCyteczno%C5%9B%C4%87_ (informatyka) Americans with Disabilities Act of 1990, Wikipedia: https://en.wikipedia.org/wiki/Americans_with_Disabilities_Act_of_1990 Konwencja o prawach osób niepełnosprawnych, Ministerstwo Rodziny i Polityki Społecznej: https://www.gov.pl/web/rodzina/konwencja-o-prawach-osob-niepelnosprawnych Web Content Accessibility Guidelines (WCAG), W3C: https://www.w3.org/TR/WCAG21/ IBM Equal Access Toolkit: https://www.ibm.com/able/toolkit/tools Axe DevTools: https://www.deque.com/axe/devtools/ Material UI: https://mui.com/ TypeScript: https://www.typescriptlang.org/"
  },
  {
    "href": "blog/2022/11/16/48",
    "title": "#48 Tech Writer uczy się frontendu, czyli jak wykorzystać technologie webowe w dokumentacji",
    "contents": "Na pierwszy rzut oka pisanie dokumentacji ma niewiele wspólnego z frontend developmentem. Kiedy jednak spojrzymy na nowoczesną dokumentację do oprogramowania to możemy odnieść wrażenie, że tak naprawdę niewiele różni się ona od zwykłej strony internetowej. Czy to oznacza, że nadszedł czas, żeby zostać Frontend Tech Writerem? Rozmawiamy o tym jakie umiejętności z zakresu technologii webowych mogą się przydać w pracy technoskryby, w jaki sposób je zdobywać i do czego można je wykorzystać w procesie tworzenia dokumentacji. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: \"Co to jest Front-end i kim jest frontend developer?\", Software Development Academy: https://sdacademy.pl/frontend-co-to-jest/ HTML: https://pl.wikipedia.org/wiki/HTML CSS: https://pl.wikipedia.org/wiki/Kaskadowe_arkusze_styl%C3%B3w WordPress: https://wordpress.com/ JavaScript: https://pl.wikipedia.org/wiki/JavaScript \"#47 Tech Writer zgłębia tajniki dostępności cyfrowej, czyli jak tworzyć dokumentację dla wszystkich\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2022/10/13/dostepnosc-cyfrowa \"#25 Tech Writer koduje w dokumentacji, czyli Markdown w wersji rozszerzonej\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2021/01/21/tech-writer-koduje-w-dokumentacji Markdown: https://daringfireball.net/projects/markdown/syntax MDX: https://mdxjs.com/ \"Wprowadzenie do JSX\": https://pl.reactjs.org/docs/introducing-jsx.html React: https://pl.reactjs.org/ \"What is a Static Site Generator? And 3 ways to find the best one\": https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/ Docusaurus: https://docusaurus.io/ Jamstack: https://jamstack.org/ EJS: https://ejs.co/ Eleventy (11ty): https://www.11ty.dev/ TypeScript: https://www.typescriptlang.org/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture MadCap Flare: https://www.madcapsoftware.com/products/flare/ Git: https://git-scm.com/"
  },
  {
    "href": "blog/2022/12/22/49",
    "title": "#49 Tech Writer testuje narzędzia do mierzenia indeksu czytelności",
    "contents": "Indeks czytelności (z ang. \"readability index\") to wskaźnik mówiący nam jak trudny do przeczytania jest dany tekst. Istnieje kilka odmian tego wskaźnika, np. Flesch-Kincaid czy SMOG. Tech Writer, UX Designer i każda inna osoba zajmująca się tworzeniem treści powinna mieć na uwadze indeks czytelności i dbać o to, żeby był on dostosowany do odbiorcy. Na rynku istnieje kilka narzędzi, które mogą nam w tym pomóc. Niedawno mieliśmy okazję sprawdzić niektóre z nich i w tym odcinku dzielimy się wnioskami i spostrzeżeniami z naszych testów. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Readability, Wikipedia: https://en.wikipedia.org/wiki/Readability Dostępność (projektowanie), Wikipedia: https://pl.wikipedia.org/wiki/Dost%C4%99pno%C5%9B%C4%87_ (projektowanie) Readability indices: https://www.analyzemywriting.com/readability_indices.html \"Flesch Reading Ease and the Flesch Kincaid Grade Level\", Readable: https://readable.com/readability/flesch-reading-ease-flesch-kincaid-grade-level/ Jasnopis: https://www.jasnopis.pl/ Logios: https://logios.dev/ Acrolinx: https://www.acrolinx.com/ Hemingway: https://hemingwayapp.com/ Textstat: https://pypi.org/project/textstat/ Vale: https://vale.sh/ Oxygen XML Author: https://www.oxygenxml.com/xml_author.html Figma: https://www.figma.com/ Alex.js: https://github.com/get-alex/alex Visual Studio (VS) Code: https://code.visualstudio.com/ IntelliJ IDEA: https://www.jetbrains.com/idea/ MDX: https://mdxjs.com/ Wprowadzenie do JSX: https://pl.reactjs.org/docs/introducing-jsx.html"
  },
  {
    "href": "blog/2022/2/14/39",
    "title": "#39 DITA as code, czyli klasyczny standard w nowoczesnym wydaniu",
    "contents": "DITA w modelu \"docs as code\"? Kto to widział? Czy to się da zrobić i czy to w ogóle ma sens? Po snuciu teorii na ten temat, przyszedł czas na konkretne działania. Rozmawiamy o tym co do tej pory udało nam się zrobić, żeby w naszej organizacji wdrożyć \"DITA as code\". Mówimy o narzędziach, przykładowym procesie robienia zmian w dokumentacji, napotkanych trudnościach i kolejnych krokach. Jeśli \"DITA z gita\" jest bliska Waszemu sercu to zapraszamy do odsłuchu. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: \"#16 DITA z Gita\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2020/04/22/dita-z-gita \"#8 DITA OT - static site generator dla wtajemniczonych\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2019/09/28/dita-ot Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Component Content Management System (CCMS): https://en.m.wikipedia.org/wiki/Component_content_management_system Git: https://git-scm.com/ \"Docs as code\", Write the Docs: https://www.writethedocs.org/guide/docs-as-code/ Bitbucket: https://bitbucket.org/ Git submodules: https://www.atlassian.com/git/tutorials/git-submodule Bitbucket pull requests: https://www.atlassian.com/git/tutorials/making-a-pull-request Oxygen XML: https://www.oxygenxml.com/#bidx-xml-author \"Krytyczna podatność w bibliotece Apache Log4j\": https://cert.pl/posts/2021/12/krytyczna-podatnosc-w-bibliotece-apache-log4j/ Sourcetree: https://www.sourcetreeapp.com/ DITA Open Toolkit (DITA OT): https://www.dita-ot.org/ Docker: https://www.docker.com/ Amazon Simple Storage Service (S3): https://aws.amazon.com/s3/ TeamCity: https://www.jetbrains.com/teamcity Schematron: https://www.schematron.com/ \"Content Reuse\": https://paligo.net/docs/en/content-reuse.html Git hooks: https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks \"Readability – what is it and how do I improve it?\", Paweł Kowaluk (soap! 2018): https://www.youtube.com/watch?v=LzrHrIOHhz8"
  },
  {
    "href": "blog/2022/3/17/40",
    "title": "#40 Tech Writer spełnia swoje marzenia, czyli co i jak można zautomatyzować",
    "contents": "Jedni marzą o drogim samochodzie a drudzy o ekskluzywnych wakacjach w ciepłych krajach. A o czym marzą Tech Writerzy? Odpowiedź znaleźliśmy w newsletterze \"Write the Docs\" z marca 2022. Okazuje się, że technoskrybowie marzą o tym, żeby pewne elementy ich pracy były zautomatyzowane. Jest to temat bliski naszemu sercu, dlatego postanowiliśmy zmierzyć się z listą życzeń z newslettera. Bazując na swoim doświadczeniu oraz zdobytych informacjach, staramy się zaproponować praktyczne rozwiązania, które przybliżą nasze koleżanki i kolegów po fachu do wymarzonej automatyzacji. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Newsletter \"Write the Docs\", marzec 2022: https://www.writethedocs.org/blog/newsletter-march-2022/ TestCafe: https://testcafe.io/ ImageMagick: https://imagemagick.org/index.php \"Simplified User Interface: The Beginner’s Guide\": https://www.techsmith.com/blog/simplified-user-interface/ Screen Capture API: https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API \"Sharing Screens with the New Javascript Screen Capture API\": https://fjolt.com/article/javascript-screen-capture-api Biblioteka Pillow: https://pillow.readthedocs.io/en/stable/ Selenium WebDriver: https://www.selenium.dev/documentation/webdriver/ Conventional commits: https://www.conventionalcommits.org Vale: https://github.com/errata-ai/vale \"Documentation as code: Part 3: A Linting How To - The Vale Linter in action (Demo)\", Tag1: https://www.tag1consulting.com/blog/documentation-code-linting-part3 \"Documentation testing\", GitLab: https://docs.gitlab.com/14.8/ee/development/documentation/testing.html Alex: https://alexjs.com/ LanguageTool: https://languagetool.org/pl Schematron: https://www.schematron.com/ \"Creative writing with GitHub copilot\", Chris Ward: https://www.youtube.com/watch?v=V_CmYyvaMqE \"Lint, Lint and Away! Linters for the English Language\", Chris Ward: https://dzone.com/articles/lint-lint-and-away-linters-for-the-english-languag Code Spell Checker: https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker Gremlins Checker: https://marketplace.visualstudio.com/items?itemName=nhoizey.gremlins \"Meet Grazie: the ultimate spelling, grammar, and style checker for IntelliJ IDEA\", IntelliJ: https://blog.jetbrains.com/idea/2019/11/meet-grazie-the-ultimate-spelling-grammar-and-style-checker-for-intellij-idea/ Pandoc: https://pandoc.org/ \"DITA as code - a modern approach to the classic standard\", Tech Writer koduje: https://techwriterkoduje.pl/dita-as-code AutoIt: https://www.autoitscript.com/site/ Bitnami: https://github.com/bitnami"
  },
  {
    "href": "blog/2022/5/2/41",
    "title": "#41 Tech Writer rozważa podobieństwa i różnice między kodowaniem a pisaniem dokumentacji",
    "contents": "\"Docs like code\" czy \"Docs as code\" to model tworzenia dokumentacji, którego głównym założeniem jest traktowanie dokumentacji jak kodu pod kątem procesów oraz narzędzi, których używamy do jej tworzenia. Jednak czy można pójść o krok dalej i rozszerzyć założenia tego modelu na sam proces pisania dokumentacji? Rozmawiamy o tym czy pisanie dokumentacji i kodowanie są do siebie podobne, czy kodujący Tech Writer ma jakieś dodatkowe umiejętności, dzięki którym jest w stanie dostarczać dokumentację lepszej jakości i czy dokumentacja mogłaby czerpać korzyści z testów, które są tworzone dla oprogramowania. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: \"Docs like code\", Anne Gentle: https://www.docslikecode.com/book/ \"Docs as code\", Write the Docs: https://www.writethedocs.org/guide/docs-as-code/ \"#39 DITA as code, czyli klasyczny standard w nowoczesnym wydaniu\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2022/02/14/dita-as-code Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Oxygen XML: https://www.oxygenxml.com/#bidx-xml-author IntelliJ IDEA: https://www.jetbrains.com/idea/ Microsoft Word: https://www.microsoft.com/pl-pl/microsoft-365/word \"Programowanie imperatywne oraz deklaratywne\", Codenga: https://codenga.pl/artykuly/poradniki/programowanie-imperatywne-oraz-deklaratywne React: https://pl.reactjs.org/ Programowanie obiektowe: https://pl.wikipedia.org/wiki/Programowanie_obiektowe Docusaurus: https://docusaurus.io/ Behavior-driven development (BDD): https://pl.wikipedia.org/wiki/Behavior-driven_development Cucumber: https://cucumber.io/ \"Rodzaje testów oprogramowania\", Testerzy.pl: https://testerzy.pl/baza-wiedzy/artykuly/rodzaje-testow-oprogramowania Test-driven development (TDD): https://pl.wikipedia.org/wiki/Test-driven_development Foobar: https://pl.wikipedia.org/wiki/Foobar Nuxt: https://nuxtjs.org/"
  },
  {
    "href": "blog/2022/6/14/42",
    "title": "#42 Konferencja soap! 2022 - podsumowanie",
    "contents": "Konferencja soap! to święto każdego Tech Writera. Razem z Edytą Rakowską, technoskrybką z Wrocławia, omawiamy nasze ulubione warsztaty i wystąpienia z edycji 2022. Rozmawiamy o sztucznej inteligencji, planowaniu ContentOps, umiejętnościach, które pozwolą nam przetrwać czwartą rewolucję przemysłową i narzędziach. Łączymy ze sobą niepowiązane tematy, odkrywamy nowe dziedziny do zbadania i nie stronimy od rożnej jakości żartów. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Konferencja soap!: https://soapconf.com/ \"Event-driven vs REST API interactions\": https://blog.axway.com/amplify-products/api-management/event-driven-vs-rest-api-interactions AsyncAPI: https://www.asyncapi.com/ Application programming interface (API): https://pl.wikipedia.org/wiki/Interfejs_programowania_aplikacji OpenAI: https://openai.com/ \"#32 Tech Writer zatrudnia asystenta, czyli sztuczna inteligencja w służbie dokumentacji\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2021/07/29/tech-writer-zatrudnia-asystenta DALL-E 2: https://openai.com/dall-e-2/ OBS (Open Broadcaster Software): https://obsproject.com/ Restream: https://restream.io/ \"What Is ContentOps?\": https://heretto.com/what-is-contentops/ \"These are the top 10 job skills of tomorrow – and how long it takes to learn them\": https://www.weforum.org/agenda/2020/10/top-10-work-skills-of-tomorrow-how-long-it-takes-to-learn-them/"
  },
  {
    "href": "blog/2022/7/16/43",
    "title": "#43 Tech Writer buduje stronę z dokumentacją, czyli prosty przepis jak zacząć od zera",
    "contents": "Zbudowanie strony z dokumentacją od zera może się wydawać nie lada wyzwaniem. Istnieje mnóstwo sposobów na podejście do tematu. Kiedy myślimy nad potencjalnym rozwiązaniem, do głowy przychodzą nam następujące pytania: Czy można do tego celu użyć darmowych narzędzi? Czy istnieje coś takiego jak bezpłatny hosting? Jak pisać dokumentację bez CCMSa? Jak wygenerować PDFy bez użycia standardu DITA? W tym odcinku staramy się stworzyć prosty (i bardzo subiektywny) przepis, który pomoże Wam zbudować nowoczesną stronę z dokumentacją w relatywnie krótkim czasie. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: \" #38 Tech Writer walczy z hakerami, czyli jak zadbać o bezpieczeństwo dokumentacji\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2022/01/10/tech-writer-walczy-z-hakerami Static Site Generator: https://www.gatsbyjs.com/docs/glossary/static-site-generator/ Docusaurus: https://docusaurus.io/ Algolia: https://www.algolia.com/ Markdown: https://daringfireball.net/projects/markdown/syntax Visual Studio (VS) Code: https://code.visualstudio.com/ VSCodium: https://vscodium.com/ Rozszerzenie Vale dla VS Code: https://github.com/errata-ai/vale-vscode Git: https://git-scm.com/ GitHub: https://github.com/ GitHub Pages: https://pages.github.com/ GitHub Actions: https://github.com/features/actions Repozytorium dla strony Tech Writer koduje: https://github.com/techwriterkoduje/site-source TeamCity: https://www.jetbrains.com/teamcity/ Jenkins: https://www.jenkins.io/ Kubernetes: https://kubernetes.io/ Docker: https://www.docker.com/ DITA Open Toolkit (OT): https://www.dita-ot.org/ Oxygen XML: https://www.oxygenxml.com/ mr-pdf: https://www.npmjs.com/package/mr-pdf"
  },
  {
    "href": "blog/2022/8/1/44",
    "title": "#44 Rekrutacja Tech Writerów w praktyce, czyli prawie wszystko co trzeba wiedzieć o rynku pracy dla technoskrybów w Polsce",
    "contents": "Rekrutacja to temat zawsze na czasie. Również wśród technoskrybów wzbudza on wiele emocji. Dlatego po ponad 2-letniej przerwie wracamy do niego razem z Michałem Słapakiem (Motorola Solutions) i Tomkiem Prusem (Atlassian). Przyglądamy się obecnej sytuacji na rynku pracy dla Tech Writerów w Polsce oraz procesowi rekrutacyjnemu zarówno pod kątem poziomu umiejętności aplikujących jak i oczekiwań zatrudniających. Oceniamy jak zmieniły się realia w ostatnich latach, staramy się zbudować profil kandydata, który posiada zestaw najbardziej poszukiwanych umiejętności i zastanawiamy jak trudno jest wejść w tech writing w branży IT osobom z zewnątrz. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: \" #12 Tech Writer się rekrutuje, czyli jak ważne są umiejętności techniczne\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2020/01/20/tech-writer-sie-rekrutuje Motorola Solutions: https://www.motorolasolutions.com/en_xu.html Unit4: https://www.unit4.com/ Atlassian: https://www.atlassian.com/ Guidewire Software: https://www.guidewire.com/ International Technical Communication Qualification Foundation (ITCQF): https://itcqf.org/ Komunikacja Techniczna - studia podyplomowe (Vistula): https://www.vistula.edu.pl/kierunki-studiow/kontynuacja-edukacji/studia-podyplomowe/informatyka/komunikacja-techniczna Python: https://www.python.org/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Raport \"Technical writing in Central and Eastern Europe\": https://itcqf.org/wp-content/uploads/2022/05/Technical-Writing-in-Central-and-Eastern-Europe.pdf Profil Michała Słapaka na LinkedIn: https://www.linkedin.com/in/michal-slapak-a1a2012/ Profil Tomasza Prusa na LinkedIn: https://www.linkedin.com/in/tomasz-prus-4b09b01a/"
  },
  {
    "href": "blog/2022/9/15/46",
    "title": "#46 Zostań hakerem w służbie pokoju, czyli o \"Hack for Peace\" słów kilka",
    "contents": "Trzy dni, pięć lokalizacji w różnych częściach Europy i jeden cel - stworzenie produktów technologicznych, które pozwolą na rozwiązanie problemów związanych z wojną. \"Hack for Peace\" to wydarzenie dla wszystkich, którzy pracują z technologią i chcieliby wykorzystać swoje umiejętności dla wspólnego dobra. Na koniec, jury składające się z przedstawicieli organizatorów i partnerów wybierze trzech zwycięzców, którzy będą mieli możliwość rozwijania swoich pomysłów pod opieką mentorów. Przewidziane są również nagrody pieniężne od \"House of Europe\". Posłuchajcie naszej krótkiej rozmowy z Olgą Sulik z firmy Sigma Software, w której staramy się Wam przybliżyć tę zacną ideę. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Sigma Software: https://sigma.software/ \"Hack for Peace\": https://hackforpeace.net/ Informacja prasowa o \"Hack for Peace\": https://docs.google.com/document/d/1-brngt30XlNYUTnfhfMPe3QVp1ZF5U-A/edit Femmegineering Meetup w Krakowie: https://www.eventbrite.co.uk/e/femmegineering-meetup-in-search-of-the-eternal-code-tickets-415343793467?aff=ebdsoporgprofile"
  },
  {
    "href": "blog/2022/9/6/45",
    "title": "#45 Tech Writer wybiera pomiędzy narzędziami open source a enterprise, czyli jak zbudować tech stack z przyszłością",
    "contents": "Open source oznacza, że się nie płaci, prawda? Niezupełnie. Nie płaci się pieniędzmi, ale za to płaci się swoim czasem. Trzeba mieć też trochę umiejętności, żeby to ogarnąć. Dlatego może lepiej zapłacić za rozwiązanie enterprise i mieć problem z głowy. Tylko wtedy też musimy zainwestować swój czas w utrzymanie systemu, nie mówiąc już o negocjacjach z vendorem i innych trudnościach. Rozmawiamy o plusach i minusach rozwiązań open source i enterprise w technical writingu. Jak podejść do wyliczania kosztów? W jakich sytuacjach lepiej zdać się na vendora, a w jakich lepiej polegać na sobie. Jakie są \"ukryte\" koszty obu ścieżek? Jeśli stoisz przed wyborem tech stacka dla technical writingu, ten odcinek jest dla Ciebie. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: WordPress: https://wordpress.com/ Docusaurus: https://docusaurus.io/ Next.js: https://nextjs.org/ Component Content Management System (CCMS): https://en.m.wikipedia.org/wiki/Component_content_management_system MadCap Flare: https://www.madcapsoftware.com/products/flare/#content Adobe RoboHelp: https://www.adobe.com/products/robohelp.html Snyk Advisor: https://snyk.io/advisor/ \"How one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript\", The Register: https://www.theregister.com/2016/03/23/npm_left_pad_chaos/ \"Open Source Developer Sabotages npm Libraries ‘Colors,’ ‘Faker’\", FOSSA: https://fossa.com/blog/npm-packages-colors-faker-corrupted/ Stack Overflow: https://stackoverflow.com/ Skeumorfizm: https://pl.wikipedia.org/wiki/Skeumorfizm"
  },
  {
    "href": "blog/2023/1/26/50",
    "title": "#50 Tech Writer bloguje z GitHub Issues, czyli nietuzinkowy sposób na platformę contentową",
    "contents": "Kiedy słyszymy Content Management System (CMS) to najpewniej w pierwszym momencie przychodzi nam na myśl WordPress albo Drupal. Raczej mało kto podejrzewa, że System Zarządzania Incydentami (Issue Tracking System) może również w powodzeniem służyć nam do zarządzania treścią. Rozmawiamy o platformie Octotype, która wykorzystuje Next.js do publikowania wpisów z GitHub Issues. Omawiamy szczegóły tego rozwiązania i zastanawiamy się czy podobne podejście można by wykorzystać w świecie dokumentacji technicznej. Sprostowanie: Podczas nagrania skrótowiec ISR rozwijamy jako \"Incremental Site Regeneration\". To jest błąd z naszej strony, ponieważ prawidłowa wersja to \"Incremental Static Regeneration\". Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Octotype: https://octotype.app/ Profil Pablo Bermejo na LinkedIn: https://es.linkedin.com/in/pablobermejo Vercel: https://vercel.com Medium: https://medium.com/ Dev.to: https://dev.to/ Hashnode: https://hashnode.com/ GitHub Issues: https://github.com/features/issues ChatGPT: https://openai.com/blog/chatgpt/ TypeScript: https://www.typescriptlang.org/ Incremental Static Regeneration (ISR) w Next.js: https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration Introducing JSX: https://reactjs.org/docs/introducing-jsx.html \"#32 Tech Writer zatrudnia asystenta, czyli sztuczna inteligencja w służbie dokumentacji\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2021/07/29/tech-writer-zatrudnia-asystenta Mastodon: https://joinmastodon.org/ diaspora*: https://diasporafoundation.org/ WordPress: https://wordpress.com/ Strapi: https://strapi.io/"
  },
  {
    "href": "blog/2023/2/26/51",
    "title": "#51 Tech Writer buduje stronę dla podcastu, czyli praktyczne zastosowanie Next.js",
    "contents": "Jakiś czas temu Docusaurus zaskarbił sobie naszą sympatię, dlatego strona naszego podcastu przez kilka lat opierała się właśnie na tym narzędziu. Nadszedł moment, w którym postanowiliśmy ją odświeżyć. Przy tej okazji rozstaliśmy się z naszym starym znajomym i sięgnęliśmy po Next.js. Rozmawiamy o tym dlaczego zdecydowaliśmy się na migrację, co dzięki temu zyskaliśmy i w jaki sposób nowe narzędzie pozwoliło nam rozwiązać pewne problemy i wprowadzić usprawnienia. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Next.js: https://nextjs.org/ Docusaurus: https://docusaurus.io/ Anchor.fm: https://anchor.fm GitHub Pages: https://pages.github.com/ GitHub Actions: https://github.com/features/actions Material UI (MUI): https://mui.com/ React: https://pl.reactjs.org/ Express: https://expressjs.com/ Node.js: https://nodejs.org/ EJS: https://ejs.co/ Element <audio>: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Zasada Pareta: https://pl.wikipedia.org/wiki/Zasada_Pareta Gra siatka koncentracji: https://techwriterkoduje.pl/focusgrid Algolia: https://www.algolia.com/ Fuse.js: https://fusejs.io/ Źródło strony techwriterkoduje.pl na GitHub: https://github.com/techwriterkoduje/podcast-site Incremental Static Regeneration (ISR) w Next.js: https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration \"#50 Tech Writer bloguje z GitHub Issues, czyli nietuzinkowy sposób na platformę contentową\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2023/1/26/50"
  },
  {
    "href": "blog/2023/4/11/52",
    "title": "#52 Od przybytku głowa też boli, czyli Tech Writer próbuje utrzymać dokumentację w ryzach",
    "contents": "Dokumentacji powinno być tyle ile trzeba, nie więcej, nie mniej. Nasi goście z firmy Etteplan, Barbara Kardel-Piątkowska i Grzegorz Nowak, na co dzień starają się utrzymać racjonalny poziom ilości dokumentacji i stworzyć rozsądne środowisko pracy nad nią. Kluczem do sukcesu są właściwe planowanie, odpowiednie procedury i narzędzia. Dodatkowego smaczku dodaje jeszcze fakt, że Basia i Grzesiek tworzą dokumentację do maszyn, która rządzi się innymi prawami niż dokumentacja do oprogramowania. Rozmawiamy o reusie, conditionalach, zarządzaniu treścią i innych ciekawych rzeczach, które mogą być pomocne w opanowaniu zbyt dużej ilości dokumentacji. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Etteplan: https://www.etteplan.com/ Dyrektywa maszynowa: https://www.ce-polska.pl/dyrektywa-2006-42-we?gclid=EAIaIQobChMIvYD5qOj8_QIVlgCiAx1MdwpwEAAYASAAEgI9efD_BwE Simplified Technical English (STE): https://www.asd-ste100.org/ Git: https://git-scm.com/ Subversion: https://subversion.apache.org/ Component Content Management System (CCMS), Wikipedia: https://en.m.wikipedia.org/wiki/Component_content_management_system Information architecture (IA), Wikipedia: https://en.wikipedia.org/wiki/Information_architecture \"Content reuse – a productivity booster or a vicious circle?\", JetBrains blog: https://blog.jetbrains.com/writerside/2022/08/content-reuse-a-productivity-booster-or-a-vicious-circle/ Profil Basi na LinkedIn: https://www.linkedin.com/in/barbara-kardel-piatkowska/ Profil Grześka na LinkedIn: https://www.linkedin.com/in/nowakgp/"
  },
  {
    "href": "blog/2023/4/24/53",
    "title": "#53 Tech Writer robi ContentOps, czyli jak holistycznie podejść do dokumentacji",
    "contents": "Dokumentacja nie powstaje w próżni, tylko jako część większego procesu tworzenia oprogramowania lub innego produktu. Dlatego cały cykl tworzenia dokumentacji to wielkie nieskończone koło, w którym biorą udział zespoły projektowe, produktowe, testerskie i dokumentacyjne. I tutaj na scenę wchodzi ContentOps! Tak jak DevOps, ContentOps to sposób na ciągłe dostarczanie (continuous delivery) i ciągłe usprawnianie (continuous improvement) dokumentacji. W tym odcinku rozmawiamy o tym jakie są kluczowe elementy tego cyklu, jakie role biorą w nim udział i jaki to ma wpływ na poszczególnych uczestników. Jeżeli interesuje Cię strategia tworzenia treści, architektura informacji, proces pisania i narzędzia, to na pewno znajdziesz tu coś dla siebie. Dźwięki wykorzystane w audycji pochodzą z kolekcji \"107 Free Retro Game Sounds\" dostępnej na stronie https://dominik-braun.net , udostępnianej na podstawie licencji Creative Commons license CC BY 4.0 ( https://creativecommons.org/licenses/by/4.0/ ). Informacje dodatkowe: Konferencja soap!: https://soapconf.com/ \"#3 SVG - przenieś grafikę w dokumentacji na wyższy poziom\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2019/6/14/3 \"#27 Tech Writer szkoli się z Pythona\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2021/2/17/27 \"#42 Konferencja soap! 2022 - podsumowanie\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2022/6/14/42 \"What is DevOps?\", Amazon: https://aws.amazon.com/devops/what-is-devops/ \"What is ContentOps\", Heretto: https://heretto.com/blog/what-is-contentops/ \"Understanding content operations - Definitions and resources\", GatherContent: https://gathercontent.com/blog/understanding-contentops-definitions-and-resources \"Information architecture\", Wikipedia: https://en.wikipedia.org/wiki/Information_architecture \"Content strategy\", Wikipedia: https://en.wikipedia.org/wiki/Content_strategy \"#52 Od przybytku głowa też boli, czyli Tech Writer próbuje utrzymać dokumentację w ryzach\", Tech Writer koduje: https://techwriterkoduje.pl/blog/2023/4/11/52 \"Docs as Code\", Write the Docs: https://www.writethedocs.org/guide/docs-as-code/ Standard DITA (Darwin Information Typing Architecture): https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture Component Content Management System (CCMS): https://en.m.wikipedia.org/wiki/Component_content_management_system \"About pull requests\", GitHub : https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"
  },
  {
    "href": "contact",
    "title": "Kontakt",
    "contents": "Chcesz nam coś przekazać? Masz pytanie lub sugestię? Może masz pomysł na odcinek podcastu albo chcesz być gościem naszej audycji? Po prostu napisz do nas. Napisz na techwriterkoduje@gmail.com skopiuj e-mail do schowka"
  },
  {
    "href": "dita-as-code",
    "title": "DITA as code - a modern approach to the classic standard",
    "contents": "The title of this article may raise some eyebrows among our fellow content\nspecialists. We are aware that for some of them “DITA as code” may sound like an\noxymoron or be the last thing they would think of. Nevertheless, we decided to\nexplore this unconventional idea and we hope that you will join us on this\nexciting journey to discover new opportunities for the tech comm world. Purpose of this article This article aims to show how you can use DITA in the docs as code model. Unlike\nsome of the more accessible but simpler markup languages like Markdown, DITA\noffers a structured framework for content creation. At the same time, it has\nenough flexibility to fit modern workflows and create a collaborative space for\ncross-functional teams. We’re not saying that: DITA is a silver bullet for your content challenges and you should always use it DITA is better than Markdown or other markup languages CCMSes are pure evil Instead, we want to convince you that: Thinking “either DITA or docs as code” is not right Docs as code is not reserved only for light markup languages and popular\nstatic site generators DITA can be cool DITA can still hold up in the face of rapidly changing modern technologies DITA can be used in the docs as code model and in some cases can give you more\nbenefits than simple markup languages Tribute Before we move on to the areas that we want to explore, we would like to stop\nfor a moment and pay tribute to the pioneers of the “DITA as code” idea - “DITA\nFor Small Teams”. This project hasn’t been active for a few years now but we\nstill encourage you to learn more about it at http://www.d4st.org/ . What is “docs as code”? Docs as code isn't a specific tool or solution. It's a philosophy, approach,\nmodel of work where you use the same techniques, tools and processes for\ndocumentation as you use for code. Typically in this model, you store sources of\nyour documentation in a version control system, you write your content using a\nmarkup language and you automate the process of building and publishing the\ndocs. However, there are no hard and fast rules on what tools and technologies\nconstitute a docs-as-code setup. That's why we are bold enough to claim that\nDITA can work well in such a setup. If you want to read more about docs as code, you can try these resources: “Docs like code” by Anne Gentle https://technology.blog.gov.uk/2017/08/25/why-we-use-a-docs-as-code-approach-for-technical-documentation/ https://www.writethedocs.org/guide/docs-as-code/ https://www.knowledgeowl.com/home/docs-as-code Goals of the docs as code model The docs as code approach sounds interesting but why should you bother to use\nit? What benefits do you get? Here are the main goals that docs as code tries to achieve: Better collaboration with developers Easier maintenance and faster delivery through automation More eagerness from developers to actively contribute to documentation - they\ncan create content in the same context as they write code Higher quality of documentation, as a result of all the points above Cost and time savings - you use the toolset that is already available in the\ncompany therefore you don't need to buy new tools, spend time on research\nbefore buying a new solution, or worry about being on your own with\ntech-comm-specific tools that no dev wants to touch. Is DITA suitable for docs as code? We believe that all the goals outlined above can also be achieved while using\nDITA as the authoring standard. These goals don’t necessarily require a lightweight markup language, like\nMarkdown. Nevertheless, docs as code and Markdown have become near synonyms. The description of docs as code on the Write The Docs page ,\nspecifically lists: “Plain Text Markup (Markdown, reStructuredText, Asciidoc)”.\nTom Johnson in his blog post about docs-as-code tools also states that working in plain text files is part of the docs-as-code model. This emphasis on using plain text markup draws the line between the docs-as-code\nmodel with a light markup, and a help authoring system with a binary or\nproprietary format and gives us the impression that there is nothing in between. The use of simple markup is further cemented by how a lot of dev teams add a\nMarkdown folder to their repository and render that markdown as the\ndocumentation website. Just look at examples for Next.js and React . Why not DITA? We think part of the problem is that vendors “locked” DITA and\nDITA OT in their CCMSes. We hear about these systems all the time in the\ncontext of DITA. We have heard it so much that we started to think that DITA ==\nCCMS. CCMSes are meant to be powerhouses that provide an end-to-end solution for\nauthoring in DITA. Many companies purchased a CCMS to reduce the time required\nfor DITA implementation. We hear stories that using DITA without a CCMS is hard\nor even impossible. Is it really true or is it because these CCMSes were created\nbefore certain technologies were available? These new technologies, often freely\navailable, open new possibilities and allow for an easier adoption of any\nopen-source technology, including DITA. Let us restate this liberating truth: DITA is an open and free standard and\nnobody forces you to use it with a CCMS. The main publishing tool, DITA Open\nToolkit, is a vendor-independent, open-source implementation of a static site\ngenerator for the DITA standard. It’s actively developed, it follows trends, and\nis well documented. You can add the standard and the publishing tool to your dev\nworkflow at no monetary or licensing cost. As we hinted above, , DITA OT is a static site generator, just like Jekyll or\nHugo. Granted, it is unique because you need to know XSL to work with it, so the\nlearning curve may be a little steeper. But it’s still just an engine that\ntransforms one format into another. And so, you are free to use DITA OT in a\ndocs as code setup like you would Jekyll or Hugo. You can use a free source\ncontrol system, a free editor, and a free CI/CD pipeline. It’s worth mentioning that DITA OT also supports Markdown as an authoring\nformat. Tools Let's look at tools which allow you to adopt DITA in the docs as code model. Content authoring In a \"typical\" docs-as-code setup, not too much attention is devoted to this\npart. Since you use a simple markup language, like Markdown, you don't need a\ndedicated doc editor. A text editor with a plugin will do the job. If you use DITA, it can be a little more complex. Of course, you can create DITA\ncontent in a simple text editor, but it won't get you far and your productivity\nwill probably be lower. Authoring content in DITA requires a more robust and\npowerful tool. In fact, writing DITA content is more like coding, so you need\nsomething that is closer to an IDE than a text editor. A good example of an IDE\nwhich supports DITA is Oxygen XML. However, you can also use an IDE like IntelliJ or Eclipse, and it requires very\nlittle setup. You can even use a rich code editor, like Visual Studio Code.\nThese solutions may mean you are less productive than with a dedicated DITA\neditor, but they can be free, and are a lot better than a simple text editor.\nThey also have the advantage of being well-integrated into coding environments\nand come equipped with tools for version control and a variety of other\nchallenges. Version control system (VCS) You can use any of the VCSes available on the market. The most popular VCS among\nsoftware development teams is git. You want to adopt the docs-as-code philosophy\nto be as close to your devs as possible, so it is likely you will use git\nprovided by services like GitHub, Bitbucket or GitLab. Git can have a steep\nlearning curve but it’s a great tool and it’s definitely worth investing your\ntime to learn it. Static site generator The bad news is that you don't have a choice here. The only free and\nvendor-independent tool that enables you to transform DITA into other formats is\nDITA Open Toolkit. It's a golden standard and many CCMSes use this tool under\nthe hood. The good news is that it's a solid and actively-developed tool\nwith exhaustive documentation and its maintainers try to keep pace with\ntechnology trends. For example, DITA OT offers an official Docker image and\nsupport for Markdown. You can extend the tool by adding your own plugins. If you know XSL and Java,\nyou can build some really powerful stuff. Just look around the official plugin registry to see what’s\nalready available. Or, if you prefer, you can use one of the existing output\nformats and modify it to suit your needs. One option could be to configure the\nDITA OT HTML5 output with CSS and JavaScript until it becomes a fully-fledged\nstatic site in its own right. Another option is to consume the HTML5 output into\nyour existing website or web CMS and integrate seamlessly into a publication\npipeline that already exists at your company. Having just one option for selecting a generator can definitely raise some\nobjections. If you use Markdown, you have a plethora of options. But when you\ndecide to use restructuredText, the number of available options drops down\nsignificantly, and you have two or maybe three engines to choose from. Maybe\nit's some kind of mysterious law of nature - the number of available generators\ndecreases as the complexity of the markup language increases. Local builds You can build DITA locally from your command line. At first, installing the DITA\nOpen Toolkit may seem like a daunting task. In reality, it’s as simple as, or\neven simpler than, installing a regular static site generator. For example, the installation instructions for Jekyll,\none of the most popular generators, tell you that you need Ruby, RubyGems, GCC\nand Make. On the other hand, DITA Open Toolkit requires only Java (JRE or JDK),\nand maybe HTML Help Workshop if you want to generate Microsoft CHM Help. You can\nalso install DITA OT via Homebrew or use an official Docker image. Another option is to use transformation scenarios in your DITA IDE. For example,\nOxygen XML offers this feature, and does not ask you to install anything extra. Automatic testing There are two major areas of testing - making sure the documentation is\npublished successfully and making sure the content is right. The first area is familiar to people who maintain websites. You need to make\nsure your content was published successfully which you can achieve by reviewing\ndifferences in snapshots between the previous version and the current version.\nYou also need to check whether all links work, all images display, and all\naccessibility and performance goals are met. Finally, you make sure that your\nsite is discoverable by web crawlers, if that’s a concern. The second area is more familiar to technical writers. Before you publish your\ncontent, you want to make sure it meets internal standards of quality\n(styleguide, correct terminology, spelling and grammar). To achieve that, you\ncan run a series of tests that will flag potential issues, or sometimes maybe\neven fix them. The most popular tool to verify “XML correctness” of DITA is Schematron which\ncan help you check how you use XML markup in your documents. You can integrate\nSchematron with the Oxygen XML editor, or run it at specified times, like when\nyou push content to a git branch. Schematron is a great way to enforce your\nstyleguide. It can check if your document follows rules like “do not create\nlists with one item” or “always put a path-like string of characters into a\nfilepath tag”. You can also add “quick fixes” to Schematron - small\ntransformations that change existing content into compliant content. To check spelling, grammar, punctuation, and other language-related issues, you\ncan use a free program like LanguageTool, or integrate with a paid product, like\nAcrolinx. You could even integrate something like Grammarly with your text\neditor. In addition, you might want to invest in a command line tool that can\nmeasure the readability score of your documents. It might be a little more tricky to develop something for DITA, because you\nwould have to get rid of DITA tags, and perhaps even segment your content\nproperly. For example, text in a uicontrol tag is still part of the same\nsentence, but an sli tag means a new item in a simple list. Also, some tags do\nnot need spell checking, like codeph which is meant to contain code, not\nlanguage. You may have better results if you check the readability of your HTML output.\nThe first major advantage of that is you are looking at text which is filtered\nby your ditaval and put together from all content references and so on.\nSecondly, there are a variety of tools that understand HTML, for example a tool called readability-checker on NPM . You also want to make sure it reflects the product correctly. That last part is\nwhere DITA can truly shine because of its semantics. It gives you the power to\ncreate various tests that you wouldn’t be able to use with lightweight markup\nlanguages. For example, you can test if the properties that you list in the docs\nactually exist in the config of your application. Or you can run the commands\ndescribed in your docs and make sure they achieve the results you promise. You can see an example implementation of semantic tests here . Content review Since we are working with DITA as code and we are in a version control platform\nlike Github, along with our friends, software developers, architects, and\nproduct owners, we are already part of the code review process, we just have to\ntake advantage of it. A typical way of reviewing code is through pull requests,\nand we can review document sources in the same way. Github, Bitbucket, Gitlab,\nand other platforms come with features which allow us to comment on code,\napprove or reject pull requests, and prevent merging if tests are not passed. Granted, DITA is a complex markup language which can make it harder to read than\nsomething as simple as Markdown. However, our reviewers in a software\ndevelopment process are people with a high level of technical sophistication,\nand they are usually able to read XML without any problems. DITA becomes\nchallenging only when there are a lot of content references to parse, but this\ncan work, as our reviewers get used to the markup and learn how DITA works. Automatic publishing You can use the same tools and workflows for DITA as for any other markup\nlanguage. A great advantage of working in a software company is that you\nprobably already have a CI/CD solution that you can plug your docs into. Talk to\ndevelopers and devops engineers in your organization to see what options you\nhave. Let machines do the cumbersome work of generating the output and\npublishing it to the server. What about reuse? In the docs as code philosophy, there's no place for a CCMS. However, one of the\nmost useful aspects of a CCMS is how it helps with reuse . When you switch to a\ngit-based solution, this feature is no longer available. So what can you do to\nmake up for this loss? Before we jump into devising a technical solution to this challenge, let's think\nabout reuse itself. We often hear that it's very beneficial and gives you\nnothing but advantages. But the truth is that content reuse comes with\nchallenges. You need to decide how granular your reuse should be. Is reusing\ntopics enough? Or maybe it would be better to reuse paragraphs? You also need to think how widespread reuse needs to be. Across one document?\nAcross a document family? Across all documents? Each option has its pros and\ncons. For example, reusing content across all documents may seem like a good\nidea, but after some time you will realize that it's harder and harder to keep\nthe content generic enough to fit all scenarios. Also, every change is more\nexpensive because you need to analyze it from the perspective of every place the\ncontent is used. Taking all these factors into account, it may be possible to address content\nreuse needs by simply making a smart decision when dividing content into git\nrepos. For example, you can keep all docs belonging to the same product family\nin one repo. This way, you can reuse content between specific docs. In this\nscenario, your IDE, like Oxygen XML, will help you with renaming and moving\nresources without breaking stuff. Working this way is very similar to coding.\nYou have your software project cloned locally, you use IDE to write and edit\ncode without breaking things. But just like with a software project, there comes a moment when you need to use\nan external library, that is content stored outside your project. How can you\nhandle this requirement? The same way you would handle it in a software\nproject - by using dependency management. Your document is a project that requires some external resources to build\nproperly. In case of a software project, you have libraries available in\ndifferent repositories, like Artifactory or Maven, from which you download them\nand then use them in your code. You need to do the same for your documents. If\nyou need to use some assets, like common topics or images, across different\ndocuments stored in separate repositories, create a place where you will publish\nthese assets and then add them as a dependency to your document. We use DITA OT to build the document. It's like using Gradle to build a Java\nproject. We could write a plugin for the toolkit that downloads the assets\nbefore building the document. DITA OT offers many extension points where we can\nadd this task. Another option that you can consider is git submodules. You create a repository\nwith common assets and then add this repository as a submodule to the git\nrepository that stores source files for the document. After that, you can pull\nchanges to the linked submodule when you pull changes for your document. This\nsolution has one advantage over using a plugin for DITA OT - the shared\nresources are available at the time of editing the document. What about link management? Even without a CCMS, link management is an area where your “DITA IDE” shines.\nSimilar to IDEs used for writing code, Oxygen XML offers some refactoring\noptions that help you manage links. For example, the option for renaming a\nresource, like a topic, isn’t limited to changing the name of the resource. It\ncan also update all references for the resource. An IDE can help us with managing links at editing time. On top of that, we need\nother mechanisms that catch invalid links at other stages of the content\ndelivery process. At the time of committing changes, we can use a pre-commit hook in git to run a\nscript that automatically validates all the links in the repository and then\nblocks the commit if it finds any issues. We can also create validation builds that run when you create a pull request.\nThe policy can be configured to prevent merging changes if the validation build\nfails. This gives you another safety mechanism that protects you against\npublishing broken content. Validation builds can be part of you automatic\ntesting. Example setup for DITA as code Here’s an example “recipe” for the toolset that you could use in the DITA as\ncode model: Content authoring - Oxygen XML Author with the git\nplugin Version control system - git through Bitbucket Static site generator - DITA Open Toolkit with\ncustom plugins, used in a Docker image CI/CD solution - TeamCity Testing tools - Schematron , Vale , custom validators written in Python Hosting solution - a Node.js server serving static\nHTML5 pages from an S3 bucket, Elasticsearch We aren’t in any way sponsored by or associated with the providers of these\ntools. We simply want to give you something practical that complements the\ntheoretical description of the tools that we provided in the previous sections.\nWe have experience working with these solutions, so we know that this setup\nworks well for the DITA as code model. DITA as code - what’s the catch? DITA as code has its advantages but that’s just one side of the story. To our\nknowledge, so far nobody has invented a silver bullet for the content delivery\nprocess and DITA as code is no exception. If you want devs to contribute to the documentation, they may be reluctant to\nuse an XML standard. They are more inclined to use Markdown and you may have a\nhard time convincing them to change their mind. Their reluctance may in turn\ncreate a temptation to delegate all content-related tasks to tech writers; they\nalready know the content delivery system inside-out so they are able to make\nchanges faster and better, right? But there’s hope. At the soap! 2019 conference, Panny\nLuo in her talk “Content as Code: A manager’s perspective” ,\nshowed us how her organization managed to implement the DITA as code model and\nhow content specialists collaborated with devs. If you have a strong business\ncase for using DITA at your organization, e.g., reuse, more granular control\nover your content, robust semantic options - you may be able to convince all the\nstakeholders to play along. A big catch of DITA as code is that you have to code a lot. Maintain your\ndevelopment infrastructure, localization, and publication. There are tools that\ncan help, but you have to customize them and know how to use them. DITA as code is also harder for contributors (both writers and reviewers) who\nare less technical. A content management system comes with a streamlined user\ninterface, kind of like writing Word documents. This creates a familiar\nexperience to most people and is easy to learn for newcomers. When maintaining\nDITA as code, the contributors have to know the principles of VCS, understand\ntheir development pipeline, and troubleshoot daily problems with both their\ncomputers and their infrastructure. When you write content Markdown, you can pick and choose which editor you want\nto use. You have plenty of options, many of them free. When you use DITA, it’s\nquite the opposite. You only have a few options and the best ones aren’t free.\nIn a big organization this cost may not be significant but in smaller companies\nit can be a deal breaker. Conclusion Here are the key takeaways from this article: DITA can be used in the docs as code model - we have done it and it works. In some areas, DITA can offer more than lightweight markup languages, like\nbetter reuse possibilities and semantics that can be used for testing DITA as code is not a silver bullet and comes with challenges, like a small\nselection of content authoring tools and a steeper learning curve for\nnon-technical users than Markdown You need to weigh all the pros and cons before deciding if the DITA as code\nmodel is the right fit for you and your team."
  },
  {
    "href": "episode-list/1",
    "title": "Lista odcinków (strona 1)",
    "contents": "#53 Tech Writer robi ContentOps, czyli jak holistycznie podejść do dokumentacji 1 h Dokumentacja nie powstaje w próżni, tylko jako część większego procesu tworzenia oprogramowania lub innego produktu. Dlatego cały cykl tworzenia dokumentacji to ... pełny opis #52 Od przybytku głowa też boli, czyli Tech Writer próbuje utrzymać dokumentację w ryzach 1 h 11 min Dokumentacji powinno być tyle ile trzeba, nie więcej, nie mniej.\nNasi goście z firmy Etteplan, Barbara Kardel-Piątkowska i Grzegorz Nowak, na co dzień starają s ... pełny opis #51 Tech Writer buduje stronę dla podcastu, czyli praktyczne zastosowanie Next.js 31 min Jakiś czas temu Docusaurus zaskarbił sobie naszą sympatię, dlatego strona naszego podcastu przez kilka lat opierała się właśnie na tym narzędziu. Nadszedł momen ... pełny opis #50 Tech Writer bloguje z GitHub Issues, czyli nietuzinkowy sposób na platformę contentową 41 min Kiedy słyszymy Content Management System (CMS) to najpewniej w pierwszym momencie przychodzi nam na myśl WordPress albo Drupal. Raczej mało kto podejrzewa, że S ... pełny opis #49 Tech Writer testuje narzędzia do mierzenia indeksu czytelności 35 min Indeks czytelności (z ang. \"readability index\") to wskaźnik mówiący nam jak trudny do przeczytania jest dany tekst. Istnieje kilka odmian tego wskaźnika, np. Fl ... pełny opis #48 Tech Writer uczy się frontendu, czyli jak wykorzystać technologie webowe w dokumentacji 37 min Na pierwszy rzut oka pisanie dokumentacji ma niewiele wspólnego z frontend developmentem. Kiedy jednak spojrzymy na nowoczesną dokumentację do oprogramowania to ... pełny opis #47 Tech Writer zgłębia tajniki dostępności cyfrowej, czyli jak tworzyć dokumentację dla wszystkich 52 min W dzisiejszych czasach, stworzenie strony internetowej jest dość łatwe i szybkie. Jednak stworzenie strony internetowej, która spełnia wymogi dostępności cyfrow ... pełny opis #46 Zostań hakerem w służbie pokoju, czyli o \"Hack for Peace\" słów kilka 12 min Trzy dni, pięć lokalizacji w różnych częściach Europy i jeden cel - stworzenie produktów technologicznych, które pozwolą na rozwiązanie problemów związanych z ... pełny opis #45 Tech Writer wybiera pomiędzy narzędziami open source a enterprise, czyli jak zbudować tech stack z przyszłością 38 min Open source oznacza, że się nie płaci, prawda? Niezupełnie. Nie płaci się pieniędzmi, ale za to płaci się swoim czasem. Trzeba mieć też trochę umiejętności, żeb ... pełny opis #44 Rekrutacja Tech Writerów w praktyce, czyli prawie wszystko co trzeba wiedzieć o rynku pracy dla technoskrybów w Polsce 56 min Rekrutacja to temat zawsze na czasie. Również wśród technoskrybów wzbudza on wiele emocji. Dlatego po ponad 2-letniej przerwie wracamy do niego razem z Michałem ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "episode-list/2",
    "title": "Lista odcinków (strona 2)",
    "contents": "#43 Tech Writer buduje stronę z dokumentacją, czyli prosty przepis jak zacząć od zera 35 min Zbudowanie strony z dokumentacją od zera może się wydawać nie lada wyzwaniem. Istnieje mnóstwo sposobów na podejście do tematu. Kiedy myślimy nad potencjalnym r ... pełny opis #42 Konferencja soap! 2022 - podsumowanie 43 min Konferencja soap! to święto każdego Tech Writera. Razem z Edytą Rakowską, technoskrybką z Wrocławia, omawiamy nasze ulubione warsztaty i wystąpienia z edycji 20 ... pełny opis #41 Tech Writer rozważa podobieństwa i różnice między kodowaniem a pisaniem dokumentacji 37 min \"Docs like code\" czy \"Docs as code\" to model tworzenia dokumentacji, którego głównym założeniem jest traktowanie dokumentacji jak kodu pod kątem procesów oraz n ... pełny opis #40 Tech Writer spełnia swoje marzenia, czyli co i jak można zautomatyzować 54 min Jedni marzą o drogim samochodzie a drudzy o ekskluzywnych wakacjach w ciepłych krajach. A o czym marzą Tech Writerzy?\nOdpowiedź znaleźliśmy w newsletterze \"Writ ... pełny opis #39 DITA as code, czyli klasyczny standard w nowoczesnym wydaniu 44 min DITA w modelu \"docs as code\"? Kto to widział? Czy to się da zrobić i czy to w ogóle ma sens? Po snuciu teorii na ten temat, przyszedł czas na konkretne działani ... pełny opis #38 Tech Writer walczy z hakerami, czyli jak zadbać o bezpieczeństwo dokumentacji 46 min Stare porzekadło \"Tańcz jakby nikt nie patrzył\" niestety nie sprawdzi się w kontekście dokumentacji. Tech Writer powinien raczej stosować zasadę \"Szyfruj wszyst ... pełny opis #37 Tech Writer potrzebuje więcej dynamiki, czyli zbyt statyczne strony z dokumentacją 31 min Dostarczanie statycznych stron z dokumentacją ostatnimi czasy wraca do łask. Prawdopodobnie dlatego, że takie strony są szybkie, bezpieczne i łatwe w serwowaniu ... pełny opis #36 Tech Writer się boi, czyli Halloween Special 2021 48 min Wszyscy czegoś się boją. Zdarza się, że nawiedzają nas koszmary i zjawy z przeszłości. Tech Writerzy nie są pod tym względem wyjątkiem. Mają swoje, nierzadko os ... pełny opis #35 Tech Writer chce kodować więcej 37 min Czy Tech Writer, który trochę koduje może kodować więcej? Jakie ma opcje rozwoju zawodowego jeśli interesują go głównie skrypty, narzędzia i inne techniczne asp ... pełny opis #34 Tech Writer dokumentuje, testuje, koduje, lokalizuje i projektuje, czyli człowiek renesansu w dokumentacji 27 min Czym na co dzień zajmuje się Technical Writer? A może lepiej zapytać czym się nie zajmuje?\nPatrycja Pyrek studiuje informatykę i ekonometrię, uczy języka japońs ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "episode-list/3",
    "title": "Lista odcinków (strona 3)",
    "contents": "#33 Kodować każdy może, czyli o Akademii Motorola Solutions słów kilka 31 min Czy w kilka miesięcy można nauczyć się kodowania i zostać zatrudnionym jako młodszy programista w międzynarodowej korporacji? Dzięki Akademii Motorola Solutions ... pełny opis #32 Tech Writer zatrudnia asystenta, czyli sztuczna inteligencja w służbie dokumentacji 41 min Od dawna mówi się o tym, że maszyny zastąpią ludzi i zajmą ich miejsce jako korona stworzenia. Jednak zanim to nastąpi, możemy wykorzystać sztuczną inteligencję ... pełny opis #31 Prosty jak budowa cepa, czyli Tech Writer tworzy generator stron statycznych 27 min Generatorów stron statycznych jest całkiem sporo. Jednak nie jest to powód, dla którego Tech Writer miałby zrezygnować ze stworzenia swojego. A że technoskryba ... pełny opis #30 Tech Writer radzi sobie ze sprzężeniem zwrotnym, czyli feedback do dokumentacji 1 h 20 min Naszą dokumentację możemy poprawić tylko wtedy jeśli wiemy jakie kryją się w niej problemy. Warto zbierać i analizować dane od użytkowników, a przede wszystkim ... pełny opis #29 Tech Writer koduje według dobrych praktyk 29 min Pewnego dnia czujesz nieodpartą chęć napisania jakiegoś skryptu. Otwierasz edytor, tworzysz nowy plik i w pocie czoła dodajesz kolejne linijki kodu. Zachowujesz ... pełny opis #28 Tech Writer wybiera narzędzie do kodowania, czyli VS Code kontra IntelliJ IDEA 40 min Co jest lepsze do pisania kodu - komercyjne środowisko programistyczne czy darmowy edytor kodu źródłowego? Czy takie porównanie w ogóle ma sens?\nMichał na co dz ... pełny opis #27 Tech Writer szkoli się z Pythona 56 min Chcesz lepiej rozumieć kod, który opisujesz? Chcesz zautomatyzować żmudne aspekty swojej pracy? Chcesz móc powiedzieć śmiało i dumnie - znam Pythona?\nW tym odci ... pełny opis #26 Tech Writerzy dokumentują API 1 h 48 min Pisanie dokumentacji do API to dziedzina sama w sobie, która w dzisiejszych czasach zyskuje na znaczeniu. Przyspieszony rozwój technologii cyfrowych w dobie pan ... pełny opis #25 Tech Writer koduje w dokumentacji, czyli Markdown w wersji rozszerzonej 26 min Markdown to prosty i lekki język znaczników, który w ostatnich latach zyskał sporą popularność, szczególnie w świecie dokumentacji dla programistów. Pozwala nam ... pełny opis #24 Tech Writer publikuje inaczej, czyli API do dokumentacji 30 min Niektóre sposoby publikowania dokumentacji są znane wśród Tech Writerów od zarania dziejów. Portale serwujące wszelakiej maści treści w formacie HTML czy PDF są ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "episode-list/4",
    "title": "Lista odcinków (strona 4)",
    "contents": "#23 Tech Writer mierzy jakość dokumentacji, czyli co i jak sprawdzać 1 h 4 min Jak zrobić najlepszą dokumentację? Ustalamy wewnętrzne standardy i się ich trzymamy, a potem sprawdzamy czy dokumentacja spełnia swoje cele. Następnie weryfikuj ... pełny opis #22 Tech Writer buduje dokumentację API, czyli Next.js, ReDoc i OpenAPI w akcji 35 min Next.js to framework Reacta, dzięki któremu można w elastyczny sposób tworzyć nowoczesne strony internetowe. Według rankingu na stronie staticgen.com, jest to r ... pełny opis #21 Tech Writer zbiera informacje ze stron, czyli jak można wykorzystać web scraping 32 min Web scraping to zbieranie danych ze stron internetowych. Google, na przykład, robi to, żeby indeksować cały internet w swojej wyszukiwarce. Web scraping wykorzy ... pełny opis #20 Tech Writer optymalizuje, czyli web performance w dokumentacji 37 min Wydajność to temat rzadko poruszany w tech writingu, pomimo tego, że webowa forma dokumentacji jest bardzo popularna. Czy szybkość ładowania stron ma znaczenie ... pełny opis #19 Tech Writer pracuje zdalnie, czyli jak to się robi w GitLabie 53 min Trwająca od kilku miesięcy sytuacja spowodowała, że biura zostały pozamykane a praca zdalna z dnia na dzień stała się nowym standardem. Jednak istnieją też taki ... pełny opis #18 Wyboista droga do kodowania 48 min Przejście od zera do kodującego Tech Writera to dość długa droga, i nie zawsze usłana różami. Jednak przy odpowiedniej motywacji i podejściu można podołać temu ... pełny opis #17 Webhelp kontra Progressive Web App 30 min Offline help, który sam się aktualizuje. Czy to w ogóle możliwe? Zastanawiamy się czy webhelp czasy świetności ma już za sobą i czy Progressive Web App (PWA) m ... pełny opis 16# DITA z Gita 33 min Czy szanujący się zespół dokumentacyjny używający standardu DITA może działać bez CCMSa? Czy Technical Writer odnajdzie się w gicie? Jakie wyzwania stwarza taka ... pełny opis #15 Technoskryby potyczki z SME, czyli jak zdobywać informacje potrzebne do tworzenia dokumentacji 1 h 6 min Jak Technical Writer radzi sobie ze zdobywaniem informacji? Co jeśli Subject Matter Expert (SME) jest niedostępny? A co jeśli dwóch SME nie może się zgodzić co ... pełny opis #14 Tech Writer zaczyna kodować w Pythonie, czyli o narzędziach i dobrych praktykach 50 min Rozmawiamy z Sebastianem Witowskim o tym jak ustawić sobie środowisko do kodowania w Pythonie i jakich błędów unikać zaczynając swoją przygodę z tym językiem pr ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "episode-list/5",
    "title": "Lista odcinków (strona 5)",
    "contents": "#13 Full-Stack Tech Writer, czyli technoskryba kontra chmura 45 min Jakie są obowiązki Technical Writera? Pewnie większość z Was odpowiedziałaby, że pisanie dokumentacji. A co z budowaniem stron i hostowaniem ich w chmurze? Damy ... pełny opis #12 Tech Writer się rekrutuje, czyli jak ważne są umiejętności techniczne 54 min Czy ogłoszenie o pracę mówi Ci co będziesz robił jako Technical Writer? Jak pracodawca sprawdzi Twoje umiejętności? Co się liczy u Technical Writera? Rozmawiamy ... pełny opis #11 Robot dokumentuje część 2 - automatyzacja kontra ludzie 51 min Spotkaliśmy się z Agatą Rygielską i rozmawialiśmy o wpływie automatyzacji na ludzi i ich pracę. Agata jest Technical Writerką od 2 lat, a wcześniej pracowała w ... pełny opis #10 Docusaurus - Tech Writer dokarmia dinozaury 51 min Docusaurus to static site generator stworzony przez Facebooka, którego główną zaletą jest prostota. Rozmawiamy o tym co oferuje to narzędzie, jakie są jego mocn ... pełny opis #9 Robot dokumentuje, czyli technical writing przyszłości 59 min Podobno nikt nie jest niezastąpiony, ale czy można zastąpić całą grupę zawodową? Zwłaszcza ludzi, którzy robią research, rozmawiają z innymi i piszą? O automaty ... pełny opis #8 DITA OT - static site generator dla wtajemniczonych 52 min Jako technoskrybi, którzy kodują, spędziliśmy trochę czasu z DITA Open Toolkit. Rozmawiamy o tym do czego służy DITA OT i jakie ma możliwości. Mówimy o wadach i ... pełny opis #7 Programista dokumentuje, czyli nowoczesny technical writing 1 h 1 min W nowoczesnej firmie software’owej nie ma ani jednego Technical Writera. W takim razie czym się zajmuje nasz gość, Rafał Pawlicki, który pracuje jako Documentat ... pełny opis #6 Konferencja EuroPython 2019 z perspektywy kodującego Tech Writera 44 min EuroPython to największa europejska konferencja poświęcona językowi programowania Python. Tegoroczna edycja odbyła się w dniach 8-14 lipca w Bazylei (Szwajcaria ... pełny opis #5 Narzędzia dla Tech Writerów 51 min Mogłoby się wydawać, że Tech Writerzy nie mają dużych potrzeb jeśli chodzi o narzędzia. W końcu co może być potrzebne do napisania instrukcji? Zapewne wystarczy ... pełny opis #4 Konferencja soap! 2019 - podsumowanie 38 min soap! to jedyna polska konferencja dla specjalistów zajmujących się szeroko pojętą treścią. Motywem przewodnim tegorocznej edycji było \"Content as code\". W tym ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "episode-list/6",
    "title": "Lista odcinków (strona 6)",
    "contents": "#3 SVG - przenieś grafikę w dokumentacji na wyższy poziom 56 min Scalable Vector Graphics (SVG) kryje w sobie wiele ciekawych aspektów, które Technical Writerzy mogliby potencjalnie wykorzystać. Nasz gość, Daniel Barrio Fierr ... pełny opis #2 Python - przyjaciel Tech Writera 43 min Python to język programowania ogólnego zastosowania, który w ostatnich latach zyskuje coraz większą popularność nie tylko wśród programistów. Jednym z powodów j ... pełny opis #1 Docs like code - rozważania praktyczne i filozoficzne 37 min \"Docs like code\" czy \"Docs as code\" to model tworzenia dokumentacji, który staje się coraz bardziej popularny wśród Tech Writerów w IT. Głównym założeniem jest ... pełny opis 1 2 3 4 5 6"
  },
  {
    "href": "focusgrid",
    "title": "Focus Grid",
    "contents": ""
  },
  {
    "href": "/",
    "title": "Strona domowa podcastu",
    "contents": "Podcast o technicznej stronie tworzenia dokumentacji w IT Skupiamy się na tym jak Tech Writer może wpasować się w środowisko programistów zarówno pod kątem sposobu pracy jak i używanych technologii, narzędzi i rozwiązań. Staramy się też pokazać, że praca Tech Writera może być ciekawa i rozwijająca pod kątem umiejętności technicznych. Anchor.fm Spotify Player.fm Apple Podcasts Google Podcasts Pocket Casts RSS Najnowsze odcinki #53 Tech Writer robi ContentOps, czyli jak holistycznie podejść do dokumentacji 1 h #52 Od przybytku głowa też boli, czyli Tech Writer próbuje utrzymać dokumentację w ryzach 1 h 11 min #51 Tech Writer buduje stronę dla podcastu, czyli praktyczne zastosowanie Next.js 31 min Wszystkie odcinki Prowadzący Od kilku lat zajmujemy się zawodowo dokumentacją do oprogramowania. Właściwie od samego początku, techniczna strona tworzenia dokumentacji była dla nas najbardziej interesująca. Dlatego uwielbiamy pisać skrypty, konfigurować narzędzia i automatyzować. Szukamy rozwiązań, które pozwolą Tech Writerom skupić się na tym co ważne. Na co dzień zastanawiamy się jak świat dokumentacji może czerpać korzyści z technologii, których używa się w świecie IT. Michał Skowron Paweł Kowaluk Kontakt Chcesz nam coś przekazać? Masz pytanie lub sugestię? Może masz pomysł na odcinek podcastu albo chcesz być gościem naszej audycji? Po prostu napisz do nas. Napisz na techwriterkoduje@gmail.com skopiuj e-mail do schowka Szanujemy i wspieramy"
  },
  {
    "href": "projects",
    "title": "Projekty",
    "contents": "Semantyczne testy w DITA (Python) Semantyczne tagi w standardzie DITA pozwalają na na pisanie bardzo dokładnych testów dokumentacji. Na przykład możesz sprawdzić czy komenda (<codeblock>) zapisana w dokumentacji jest poprawna i czy przyniesie pożądany skutek (<result>). Zacznij testować Statyczna strona z dokumentacja do wielu API (Next.js + Redoc) Zobacz przykład strony, która wyświetla zbiór specyfikacji OpenAPI. Redoc renderuje każdą ze specyfikacji. Next.js serwuje całość jako statyczną stronę. Dokumentuj API Focus Grid Gra poprawiająca koncentrację. Wybierz rozmiar tablicy i odsłoń kolejne liczby w jak najkrótszym czasie. Zagraj Źródło tej strony (Next.js) Podoba Ci się nasza strona? Chcesz stworzyć podobną? Strona opiera się o Next.js. Odcinki są pobierane z anchor.fm przez RSS feed. Strona jest statycznie generowana kiedy wychodzi nowy odcinek lub robimy jakieś inne zmiany. Strona jest deployowana za pomocą GitHub Actions i hostowana na GitHub Pages. Zainspiruj się"
  },
  {
    "href": "python/co-dalej",
    "title": "Co dalej?",
    "contents": "Dotarliśmy do końca przewodnika. Dobra robota! Twoja pierwsza aplikacja w\nPythonie jest gotowa. Mam nadzieję, że to dopiero początek Twojej przygody z tym\njęzykiem programowania i że udało mi się przekonać Cię, że warto przyjrzeć się\nmu bliżej. Jeśli chcesz dowiedzieć się więcej o Pythonie i komponentach dostępnych w The\nPython Standard Library to polecam oficjalną dokumentację\n( https://docs.python.org/3/ ). Możesz też dalej pracować nad generatorem, żeby stał się jeszcze lepszy. Oto\nmoje propozycje. Wsparcie dla Markdowna Źródłem dla generatora są zwykłe pliki tekstowe. To niesie ze sobą pewne\nograniczenia. Na przykład, nie możemy dodawać formatowania takiego jak\npogrubienie czy kursywa. Jeśli potrzebujesz używać Markdowna w plikach\ntekstowych, możesz przyjrzeć się zewnętrznemu komponentowi Python Markdown ( https://python-markdown.github.io/ ). Nie jest on częścią The Python Standard\nLibrary , więc trzeba go zainstalować za pomocą narzędzia pip . Bardziej zaawansowane szablony Możesz zastąpić element Template z komponentu string bardziej zaawansowanym\nnarzędziem do tworzenia szablonów. Jedną z możliwości jest jinja2 ( https://jinja.palletsprojects.com/ ), która oferuje naprawdę sporo możliwości. Lepszy wygląd pliku HTML Warto pomyśleć nad dodaniem jakichś ładnych stylów do pliku HTML. Do tego\nbędziesz potrzebować znajomości CSS. Możesz przyjrzeć się bibliotece Bootstrap ( https://getbootstrap.com/ ) rozwijanej przez Twittera. Jest ona\nbardzo popularna i pozwala niskim kosztem tworzyć atrakcyjne strony HTML. To już wiedza wykraczająca poza Pythona, ale na pewno przyda Ci się ona\nniejednokrotnie w przyszłości podczas tworzenia innych narzędzi."
  },
  {
    "href": "python/gotowa-aplikacja",
    "title": "Gotowa aplikacja",
    "contents": "Udało się nam przejść przez wszystkie etapy tworzenia generatora. Poniżej\nkompletny kod naszej aplikacji. rel_notes_generator.py from string import Template\nfrom pathlib import Path\nfrom shutil import rmtree current_dir = Path(__file__).parent\ninput_dir = current_dir / 'input'\noutput_dir = current_dir / 'output' rel_note_template = Template('''<tr>\n<td>$id</td>\n<td>$description</td>\n</tr>\n''') def get_release_notes(source_dir): rel_notes = {} for file in source_dir.glob('*.txt'): rel_note_id = file.stem with file.open() as f: rel_note_text = f.read() rel_notes[rel_note_id] = rel_note_text return rel_notes def generate_release_notes(release_notes): rel_note_table_rows = '' for id, description in release_notes.items(): rel_note_table_rows += rel_note_template.substitute( id=id, description=description) return rel_note_table_rows def write_release_notes(release_note_rows, target_dir): if target_dir.exists(): rmtree(target_dir) target_dir.mkdir() with Path('release_notes_template.html').open() as rnt: file_template = Template(rnt.read()) with (target_dir / 'release_notes.html').open('w') as rn: rn.write(file_template.substitute(release_notes=release_note_rows)) if __name__ == '__main__': collected_release_notes = get_release_notes(input_dir) generated_table_rows = generate_release_notes(collected_release_notes) write_release_notes(generated_table_rows, output_dir)"
  },
  {
    "href": "python/podziekowania",
    "title": "Podziękowania",
    "contents": "Paweł Kowaluk Senior Technical Writer w Guidewire Software, mój dobry kolega i wieloletni\nwspółpracownik. Na co dzień razem pracujemy, a w wolnym czasie nagrywamy podcast\n\"Tech Writer koduje\". Dziękuję za recenzję, wsparcie i pomoc w przygotowaniu oprawy graficznej. Z Pawłem możecie się skontaktować za pomocą jego profilu na LinkedIn\n( https://www.linkedin.com/in/pawel-kowaluk/ ). Sebastian Witowski Konsultant i trener Pythona, mój znajomy z konferencji EuroPython 2019. Dziękuję za recenzję merytoryczną. W 14. odcinku podcasta \"Tech Writer koduje\" ,\nrozmawialiśmy z Sebastianem o tym jak ustawić sobie środowisko do kodowania w\nPythonie i jakich błędów unikać zaczynając swoją przygodę z tym językiem\nprogramowania. Polecam też warsztat \"Modern Python Developer's\nToolkit\"( https://www.youtube.com/watch?v=WkUBx3g2QfQ&feature=youtu.be ), który\nSebastian przygotował w ramach konferencji PyCon US 2020. Z Sebastianem możecie się skontaktować za pomocą jego strony\n( https://switowski.com/ )."
  },
  {
    "href": "python/praktyka-1",
    "title": "Krok 1: Stwórz folder dla generatora",
    "contents": "W dogodnej lokalizacji na swoim dysku, stwórz folder rel_notes_generator . W\ntym folderze będziemy dodawać kolejne zasoby potrzebne nam do zbudowania\ngeneratora."
  },
  {
    "href": "python/praktyka-10",
    "title": "Krok 10: Ostatnie szlify",
    "contents": "To już ostatnia prosta. Właściwie mamy już wszystko co nam potrzebne. Teraz\npozostaje nam uruchomić nasze funkcje. Żeby to zrobić, dodaj taki kod. rel_notes_generator.py if __name__ == '__main__': collected_release_notes = get_release_notes(input_dir) generated_table_rows = generate_release_notes(collected_release_notes) write_release_notes(generated_table_rows, output_dir) Pierwsza linijka, if __name__ == '__main__' , wygląda dość enigmatycznie. W\nPythonie w taki sposób określamy, że dany fragment kodu ma zostać uruchomiony\ntylko jeśli wywołamy plik .py jako skrypt z linii komend. Dzięki temu, ten\nfragment kodu nie zostanie wywołany jeśli zaimportujemy nasz plik .py do\ninnego pliku. Zapewne to wszystko brzmi dość zagadkowo, dlatego postaram się to\nrozjaśnić na przykładzie. Kod naszego generatora znajduje się w pliku rel_notes_generator.py . W\nwiększości przypadków będziesz uruchamiać generator z linii komend jak skrypt za\npomocą polecenia python rel_notes_generator.py . Kiedy to zrobisz, część kodu,\nktóra znajduje się pod if __name__ == '__main__' zostanie wykonana. Czyli\nwszystko się zgadza, to jest właśnie to o co nam chodzi. Po pewnym czasie, stworzysz kolejny generator, który będzie miał trochę inne\nfunkcje niż generator, który stworzyliśmy wspólnie. Jednak pewne części będą\ntakie same. Żeby nie pisać tego samego kodu jeszcze raz, możesz zaimportować rel_notes_generator.py do swojego nowego generatora w taki sam sposób jak\nimportowaliśmy komponenty w kroku 5. W tej sytuacji chcesz tylko zaimportować\nfunkcje z generatora, ale nie chcesz, żeby się uruchomiły. O tym kiedy je\nuruchomić, zdecydujesz w odpowiedniej części swojego nowego generatora. I\nwłaśnie użycie if __name__ == '__main__' , powoduje że funkcje się nie\nuruchomią. Podczas importu funkcji, wszystko co znajduje się poniżej tej linijki\nnie wykona się. Skoro już wiemy po co nam ten enigmatyczny fragment kodu, zobaczmy co znajduje\nsię pod nim. Najpierw, uruchamiamy funkcję get_release_notes na folderze input , czyli tam gdzie mamy nasze testowe pliki tekstowe. Dla przypomnienia,\nfunkcja wyciągnie nam nazwy i zawartość plików tekstowych. Wynik uruchomienia\nfunkcji przypisujemy do zmiennej collected_release_notes . Następnie,\nuruchamiamy funkcję generate_release_notes , która stworzy nam wiersze tabeli\nHTML z zawartości plików tekstowych, którą trzymamy w zmiennej collected_release_notes . Wygenerowane wiersze tabeli przypisujemy do zmiennej generated_release_notes . Ostatnia operacja, to uruchomienie funkcji write_release_notes , która zapisze to co mamy w zmiennej generated_release_notes do końcowego pliku HTML. Nasze noty wydania są gotowe!"
  },
  {
    "href": "python/praktyka-2",
    "title": "Krok 2: Dodaj przykładowe pliki tekstowe",
    "contents": "Stwórz folder rel_notes_generator\\input , a w nim dodaj dwa pliki tekstowe, PROJ-101.txt i PROJ-102.txt , z taką zawartością jak widać poniżej. Tymi\nplikami \"nakarmimy\" nasz generator. Dzięki temu będziemy mogli sprawdzić czy\ndziała tak jak tego chcemy. PROJ-101.txt Dodaliśmy nową funkcję, która pozwala na szybkie pobieranie zasobów\nsieciowych. PROJ-102.txt Naprawiliśmy błąd, który powodował, że aplikacja zawieszała się na kilka\nsekund, a następnie okno aplikacji przesuwało się poza ekran przez co stawało\nsię niewidoczne."
  },
  {
    "href": "python/praktyka-3",
    "title": "Krok 3: Stwórz szablon dla pliku HTML",
    "contents": "Mamy już pliki tekstowe, z których pobierzemy treść naszych not wydania. Teraz\npotrzebujemy jeszcze szablonu, do którego wstawimy informacje pobrane z plików\ntekstowych. Stwórz plik rel_notes_generator\\release_notes_template.html z\ntakim kodem HTML. release_notes_template.html <!DOCTYPE html>\n<html lang=\"en\"> <head> <meta charset=\"utf-8\" /> <title>Noty wydania</title> </head> <body> <table> <tr> <th>Numer zgłoszenia</th> <th>Opis</th> </tr> $release_notes </table> </body>\n</html> Ten prosty plik zawiera tabelkę, która póki co ma tylko jeden wiersz z dwoma\nkolumnami ( Numer zgłoszenia i Opis ) oraz tajemniczy element $release_notes . Jest to element zastępczy, który zostanie zamieniony przez\nnasz generator na informacje pobrane z plików tekstowych. W kroku 5 poznasz\nkomponent Pythona, który będzie w stanie zrobić użytek z tego elementu."
  },
  {
    "href": "python/praktyka-4",
    "title": "Krok 4: Stwórz plik dla kodu generatora",
    "contents": "Stwórz plik rel_notes_generator\\rel_notes_generator.py . Pliki zawierające kod\nPythona mają rozszerzenie .py . W tym pliku będzie znajdował się kod dla\nnaszego generatora, który napiszemy w kolejnych krokach."
  },
  {
    "href": "python/praktyka-5",
    "title": "Krok 5: Dodaj linki do potrzebnych komponentów Pythona",
    "contents": "Python zawiera w sobie bogaty zestaw gotowych komponentów, z których możemy\nkorzystać od razu bez instalowania dodatkowego oprogramowania. Ten zestaw nazywa\nsię The Python Standard Library . Żeby móc skorzystać z jakiegoś komponentu\nmusimy go zaimportować w naszej aplikacji, czyli tak jakby dodać do niego link.\nMożemy to zrobić wpisując: import nazwaKomponentu albo from nazwaKomponentu import nazwaElementu Różnica jest taka, że w pierwszym sposobie importujemy cały komponent a w drugim\ntylko określone elementy, których akurat potrzebujemy. Nasz generator będzie korzystał z trzech elementów, które są w trzech różnych\nkomponentach. Dlatego na początku naszego kodu w pliku rel_notes_generator.py musimy dodać takie linijki. rel_notes_generator.py from string import Template\nfrom pathlib import Path\nfrom shutil import rmtree Z komponentu string importujemy element Template , który pozwala na obsługę\nszablonów. Będzie on nam potrzebny, żeby odpowiednio opakować informacje pobrane\nz plików tekstowych i potem je podstawić w odpowiednie miejsce w szablonie HTML.\nJak pamiętasz, w kroku 3 pojawił się element zastępczy $release_notes .\nDodaliśmy go do naszego szablonu po to, żeby komponent Template wiedział gdzie\nma wstawić właściwe informacje. Z komponentu pathlib importujemy element Path , dzięki któremu w elegancki\nsposób będziemy mogli ustawić w naszej aplikacji ścieżki do potrzebnych zasobów. Z komponentu shutil importujemy element rmtree , który pozwala na usuwanie\nfolderów, nawet jeśli nie są puste."
  },
  {
    "href": "python/praktyka-6",
    "title": "Krok 6: Ustaw ścieżki do potrzebnych zasobów",
    "contents": "W naszym generatorze musimy ustawić trzy ścieżki w taki oto sposób. rel_notes_generator.py current_dir = Path(__file__).parent\ninput_dir = current_dir / 'input'\noutput_dir = current_dir / 'output' Zanim przejdę do wyjaśnienia o co dokładnie tutaj chodzi, wspomnę tylko, że\nzmienne w Pythonie tworzymy poprzez przypisanie jakiejś wartości do nazwy. Na\nprzykład, jeśli chciałbym stworzyć zmienną name , która będzie przechowywać w\nsobie moje imię i nazwisko, to muszę zrobić to tak. name = 'Michał Skowron' W Pythonie możesz używać zarówno pojedynczych ( '' ) jak i podwójnych ( \"\" )\ncudzysłowów. Ale wróćmy do naszych ścieżek. Na początku, ustawiamy current_dir czyli\nścieżkę do folderu, w którym znajduje się nasz plik rel_notes_generator.py .\nRobimy to za pomocą elementu __file__ dostępnego w Pythonie. Ten element\nprzechowuje ścieżkę do pliku. Dodając .parent mówimy Pythonowi, że chcemy w\nnaszej zmiennej zapisać nie ścieżkę do naszego pliku, tylko do folderu, w którym\nnasz plik się znajduje. Pewnie zastanawiasz się po co jest nam to potrzebne? Jest to ogólnie dobra\npraktyka. Korzystając z niej ułatwiamy sobie życie, bo nie musimy na sztywno\nwpisywać ścieżki do naszego pliku. Dzięki temu nie ma znaczenia gdzie znajduje\nsię nasz plik rel_notes_generator.py , bo Python sam sobie rozwiąże tę ścieżkę.\nTa ścieżka jest naszym punktem wyjścia dla kolejnych ścieżek. Na jej podstawie\nbudujemy ścieżkę do folderu input , w którym trzymamy pliki tekstowe i do\nfolderu output , w którym zapisujemy nasz końcowy plik HTML. Możliwe, że zastanawiasz się teraz czy nie dałoby się tego zrobić prościej i\nuniknąć tej szamanerii. Dałoby się, ale niekoniecznie byłoby to lepsze\nrozwiązanie. Gdybyśmy nie skorzystali z elementu __file__ , musielibyśmy\nustawić ścieżki \"na piechotę\". Wyobraź sobie, że Twój plik rel_notes_generator.py znajduje się w C:\\my-apps\\rel_notes_generator . Więc\nustawiasz ścieżki na sztywno w taki sposób. current_dir = 'C:\\my-apps\\rel_notes_generator'\ninput_dir = current_dir + '\\' + 'input'\noutput_dir = current_dir + '\\' + 'output' Takie rozwiązanie na pierwszy rzut oka może Ci się wydawać całkiem w porządku,\nale niestety niesie ze sobą parę problemów. Generator będzie działał tylko wtedy\njeśli: Uruchomimy go na Windowsie Nasz folder projektu będzie nazywał się rel_notes_generator i będzie\nznajdował się w C:\\my-apps . Jeśli zmienimy nazwę folderu projektu albo przeniesiemy go w inne miejsce, to\nnasz generator przestanie działać. To dość spore ograniczenia, których możemy\nuniknąć stosując komponent pathlib i ścieżkę do folderu projektu, która sama\nsię automatycznie rozwiązuje."
  },
  {
    "href": "python/praktyka-7",
    "title": "Krok 7: Dodaj funkcję do wyciągania informacji z plików źródłowych",
    "contents": "Teraz dodamy naszą pierwszą funkcję. Funkcja w kodzie to nic innego jak kawałek kodu, który wykonuje jakąś operację.\nBędzie nam ona potrzebna, żeby z naszych plików tekstowych pobrać ich nazwę i\nzawartość. Dodaj do pliku rel_notes_generator.py następujący kod. rel_notes_generator.py def get_release_notes(source_dir): rel_notes = {} for file in source_dir.glob('*.txt'): rel_note_id = file.stem with file.open() as f: rel_note_text = f.read() rel_notes[rel_note_id] = rel_note_text return rel_notes W Pythonie, tworzymy funkcję za pomocą słowa def . Następnie podajemy nazwę\nfunkcji i opcjonalnie w nawiasie określamy parametry, które funkcja przyjmuje. W naszym wypadku funkcja nazywa się get_release_notes . Żeby mogła wykonać\npoprawnie swoje zadanie, musimy podać jej ścieżkę do folderu, w którym znajdują\nsię pliki tekstowe ( source_dir ). Pierwsze koty za płoty. Idziemy dalej. Nasza funkcja ma za zadanie przejść przez\nwszystkie pliki i zebrać z nich nazwę i zawartość. Zgodnie z tym co zostało\nustalone z programistami w Twoim projekcie, nazwa pliku to numer zgłoszenia, a\nzawartość to opis wprowadzonych zmian w kodzie aplikacji. W związku z tym,\nwygodnie będzie nam zapisać informacje zebrane przez naszą funkcję w formie\nsłownika ( dict ), czyli takiego zbioru elementów klucz: wartość . W Pythonie,\nsłownik to jeden z najważniejszych typów danych, który jest bardzo często\nużywany. W naszym wypadku, taka para będzie wyglądać tak: numer zgłoszenia: opis zmian .\nNa początku dodajemy zmienną rel_notes , która będzie przechowywać pusty\nsłownik ( {} ). Potem ten pusty słownik wypełnimy danymi, które nasza funkcja\nzbierze. W folderze może znajdować się więcej niż jeden plik tekstowy, więc musimy zrobić\npętlę, która przejdzie po wszystkich plikach. Innymi słowy, mówimy Pythonowi,\nżeby dla każdego pliku ( for file ), który ma rozszerzenie TXT\n( in source_dir.glob('*.txt') ): W zmiennej rel_note_id zapisał nazwę pliku ( file.stem ). Otworzył plik ( with file.open() as f ) i w zmiennej rel_note_text zapisał\njego zawartość, którą pobrał ( f.read() ). Do słownika dodał parę z numerem zgłoszenia i opisem zmian\n( rel_notes[rel_note_id] = rel_note_text ). Kiedy pętla przejdzie po wszystkich plikach, funkcja zwróci nam wypełniony\nsłownik ( return rel_notes ). W naszym testowym środowisku, funkcja zwróci nam\ntaki słownik: { \"PROJ-101\": \"Dodaliśmy nową funkcję, która pozwala na szybkie pobieranie zasobów sieciowych.\", \"PROJ-102\": \"Naprawiliśmy błąd, który powodował, że aplikacja zawieszała się na kilka sekund, a następnie okno aplikacji przesuwało się poza ekran przez co stawało się niewidoczne.\"\n} Na tym etapie, tylko stworzyliśmy nową funkcję, ale jeszcze jej nie\nuruchomiliśmy. To zrobimy dopiero później."
  },
  {
    "href": "python/praktyka-8",
    "title": "Krok 8: Dodaj funkcję generującą wiersze tabeli",
    "contents": "W poprzednim kroku zrobiliśmy całkiem sporo, ale to dopiero początek. Potrzebne\nnam będą jeszcze inne funkcje, żeby nasza aplikacja zrobiła wszystko co to\nchcemy, czyli stworzyła dla nas plik HTML z notami wydania. W tym kroku dodamy funkcję i prosty szablon, który pozwoli nam przerobić słownik\nna fragment kodu HTML. Będą to wiersze tabeli, które podstawimy w kolejnych\nkrokach do naszego szablonu HTML. Jak pamiętasz, szablon przygotowaliśmy w\nkroku 3. Na początek, dodaj taki mały szablon. rel_notes_generator.py rel_note_template = Template('''<tr>\n<td>$id</td>\n<td>$description</td>\n</tr>\n''') Szablon ma w sobie dwa elementy zastępcze, $id i $description , które\nbędziemy zamieniać odpowiednio na klucz i wartość ze słownika. Potrójny\ncudzysłów ( ''' lub \"\"\" ) służy do tworzenia łańcuchów znaków, które zajmują\nwięcej niż jedną linijkę. Dla łańcuchów znaków, które nie wykraczają poza jedną\nlinijkę używa się pojedynczego cudzysłowu ( ' lub \" ). Następnie dodaj kolejną funkcję. rel_notes_generator.py def generate_release_notes(release_notes): rel_note_table_rows = '' for id, description in release_notes.items(): rel_note_table_rows += rel_note_template.substitute( id=id, description=description) return rel_note_table_rows Jej zadaniem będzie przekształcenie słownika we fragment kodu HTML. W poprzednim\nkroku analizowaliśmy poszczególne części składowe funkcji, więc pewnie ta\nfunkcja nie jest już dla Ciebie wielką niewiadomą. Jednak dla porządku przejdźmy\npo tym co się tutaj dzieje. Nasza funkcja o nazwie generate_release_notes przyjmuje jako parametr słownik\n( release_notes ), w którym są pary numer zgłoszenia: opis zmian . Na początku, tworzymy zmienną rel_note_table_rows , której wartość to pusty\ntekst ( '' ). W tej zmiennej zapiszemy nasze wiersze tabeli HTML, które\nwygenerujemy za pomocą naszego szablonu rel_note_template . Następnie, mówimy Pythonowi, żeby dla każdej pary ( for id, description ) w\nsłowniku ( release_notes.items() ): Wziął szablon rel_note_template i podmienił w nim element zastępczy $id na id ze słownika (czyli numer zgłoszenia) i zamienił element zastępczy $description na description ze słownika. Innymi słowy pobieramy ze\nsłownika numer zgłoszenia i opis zmian i wstawiamy je do szablonu\n( rel_note_template.substitute(id=id, description=description) ). Dodał wygenerowany wiersz tabeli HTML do zmiennej, którą stworzyliśmy na\npoczątku ( rel_note_table_rows += ). Kiedy pętla przejdzie po wszystkich parach w słowniku, funkcja zwróci nam\nzmienną z gotowymi wierszami tabeli ( return rel_note_table_rows ). W naszym\ntestowym środowisku, funkcja zwróci nam taki kod: <tr> <td>PROJ-101</td> <td> Dodaliśmy nową funkcję, która pozwala na szybkie pobieranie zasobów sieciowych. </td>\n</tr>\n<tr> <td>PROJ-102</td> <td> Naprawiliśmy błąd, który powodował, że aplikacja zawieszała się na kilka sekund, a następnie okno aplikacji przesuwało się poza ekran przez co stawało się niewidoczne. </td>\n</tr> Dla przypomnienia dodam, że tak jak w poprzednim kroku, tylko stworzyliśmy nową\nfunkcję, ale jeszcze jej nie uruchomiliśmy. To zrobimy dopiero później."
  },
  {
    "href": "python/praktyka-9",
    "title": "Krok 9: Dodaj funkcję zapisującą końcowy plik HTML",
    "contents": "To już ostatnia funkcja, której potrzebujemy. Jej zadaniem jest podstawienie\nwierszy tabeli do szablonu pliku HTML, a następnie zapisanie końcowego pliku\nHTML z notkami wydania. Dodaj taki kod do pliku rel_notes_generator.py . rel_notes_generator.py def write_release_notes(release_note_rows, target_dir): if target_dir.exists(): rmtree(target_dir) target_dir.mkdir() with Path('release_notes_template.html').open() as rnt: file_template = Template(rnt.read()) with (target_dir / 'release_notes.html').open('w') as rn: rn.write(file_template.substitute(release_notes=release_note_rows)) Na początku funkcja sprawdza czy folder docelowy, w którym zapiszemy końcowy\nplik już istnieje ( target_dir.exists() ). Jeśli tak, to najpierw go kasuje\n( rmtree(target_dir) ). Następnie, funkcja tworzy folder docelowy\n( target_dir.mkdir() ). Te wszystkie kroki możemy wykonać w łatwy sposób dzięki\nkomponentom pathlib i shutil , które zaimportowaliśmy w kroku 5. Po przygotowaniu folderu docelowego, funkcja otwiera plik szablonu HTML\n( with Path('release_notes_template.html').open() as rnt ) po czym przypisuje\nzawartość szablonu do zmiennej file_template ( file_template = Template(rnt.read()) ). Następnie, funkcja tworzy pusty plik końcowy o nazwie release_notes.html ( with (target_dir / 'release_notes.html').open('w') as rn ). Ostatnia część to\nzamiana w szablonie HTML elementu zastępczego $release_notes na właściwe\nwiersze tabeli i zapisanie tego kodu HTML do pliku końcowego\n( rn.write(file_template.substitute(release_notes=release_note_rows)) ). Funkcja jest dość krótka, ale całkiem sporo się tutaj wydarzyło. To jest właśnie\njedna z zalet Pythona - zwięzła i czytelna składnia, dzięki której można na\nniewielkiej przestrzeni zawrzeć całkiem sporo logiki. Tak jak poprzednio, na razie tylko zdefiniowaliśmy funkcję. Teraz musimy ją\njeszcze uruchomić."
  },
  {
    "href": "python/praktyka-przygotowanie",
    "title": "Przygotowanie",
    "contents": "Co nam będzie potrzebne? Starałem się ograniczyć liczbę potrzebnych komponentów do minimum, żebyśmy mogli\nprzejść jak najszybciej do kodowania. Jednak pewnych rzeczy nie da się pominąć,\ndlatego będziesz potrzebować takiego oprogramowania. Python Pythona trzeba zainstalować. W niektórych systemach operacyjnych, może już być\nzainstalowany, ale istnieje spora szansa, że nie będzie to wersja, której\npotrzebujemy. A będziemy potrzebować wersji 3.7 lub nowszej. Instalatory znajdziesz na oficjalnej stronie Pythona ( https://www.python.org/ ).\nMożesz też zainstalować Pythona poprzez menedżera paczek w swoim systemie\noperacyjnym. Kolejną opcją jest użycie narzędzia pyenv\n( https://github.com/pyenv/pyenv ). W przypadku Windowsa możesz także skorzystać z\ninstalacji poprzez Microsoft Store. Wybierz dogodną dla siebie metodę instalacji. Jeśli napotkasz jakieś problemy to\nnajlepiej poproś o pomoc kogoś kto ma doświadczenie z Pythonem albo poszukaj\ninformacji w internecie. Biorąc pod uwagę liczbę systemów operacyjnych,\npotencjalna liczba problemów z instalacją jest spora, dlatego nie byłbym w\nstanie pokryć w tym przewodniku każdej możliwej ścieżki. Bez względu na to jaką wybierzesz metodę instalacji, zwróć uwagę, żeby dodać\nPythona do zmiennych środowiskowych, czyli przypisać komendę python do Pythona\n3, którego zainstalujesz. Robi się to różnie w zależności od systemu\noperacyjnego i sposobu instalacji. Na przykład, jeśli instalujesz Pythona na\nWindowsie za pomocą instalatora pobranego z oficjalnej strony Pythona, na jednym\nz ekranów będziesz mieć opcję, żeby dodać Pythona do zmiennych środowiskowych\n( PATH ). Edytor tekstowy Możesz użyć jakiegokolwiek edytora tekstowego, żeby kodować w Pythonie. Jednak\nzachęcam Cię do skorzystania z edytora, który wspiera Pythona. Ułatwi Ci to\nznacznie życie, bo taki edytor podpowie Ci podczas pisania jakie masz opcje,\nautomatycznie sformatuje Twój kod i da Ci znać jeśli coś będzie nie tak. Na\nszczęście nie ma problemu ze znalezieniem odpowiedniego edytora, który jest\ndarmowy. Nie chcę Ci narzucać niczego, ale w momencie pisania tego przewodnika\npopularnym i darmowym edytorem, który oferuje wsparcie dla Pythona jest Visual\nStudio Code od Microsoftu ( https://code.visualstudio.com/ ). Może ta opcja będzie\ndla Ciebie odpowiednia. Oprócz edytorów, możesz skorzystać z bardziej zaawansowanej opcji, czyli IDE\n(ang. integrated development environment ). Przykładem może być PyCharm od\nJetBrains ( https://www.jetbrains.com/pycharm/ ). Jednak na nasze potrzeby jest to\nza dużo. Nauczenie się obsługi IDE przyniesie Ci korzyści, ale na późniejszym\netapie nauki Pythona. Na tym etapie, polecam edytor tekstowy. Kodowanie czas zacząć Mam nadzieję, że instalacja Pythona i edytora nie przysporzyły Ci problemów i że\nTwój zapał jest taki sam albo większy jak w momencie rozpoczęcia czytania tego\nprzewodnika. Skoro mamy już wszystko gotowe to zabieramy się do pracy. Będziemy krok po kroku budować naszą aplikację. Pomimo tego, że ten przewodnik\njest napisany w języku polskim i nasze pliki tekstowe zawierają w sobie polski\ntekst, to nasz kod będziemy pisać po angielsku. Być może wyda Ci się to dziwne,\nale według mnie jest to bardziej naturalne i powszechne. Poza tym, dzięki temu,\nTwój kod będzie mógł bywać w świecie, bo Twoi anglojęzyczni znajomi też będą w\nstanie go zrozumieć. Jeśli chcesz od razu skoczyć na głęboką wodę albo po prostu jesteś ciekaw co tu\nsię wydarzy, przejdź do sekcji Gotowa aplikacja ."
  },
  {
    "href": "python/praktyka-run",
    "title": "Jak uruchomić generator?",
    "contents": "W kroku 10, pojawiła się już informacja jak wywołać plik .py z linii komend.\nJednak dla porządku, zamieszczam informację jak uruchomić generator: Otwórz linię komend. Przejdź do folderu rel_notes_generator . Uruchom poniższą komendę. python rel_notes_generator.py W folderze output pojawi się plik release_notes.html z gotowymi notami\nwydania. W zależności od tego w jaki sposób Python został zainstalowany na Twoim\nkomputerze, komenda może się różnić. Na przykład, jeśli Python 3 nie został\ndodany do zmiennych środowiskowych Twojego systemu operacyjnego, może\nuruchomić się Python 2, który już wcześniej był zainstalowany na Twoim\nkomputerze. W innym wypadku, komenda może w ogóle nie zostać rozpoznana.\nMożesz wtedy spróbować użyć komendy python3 ."
  },
  {
    "href": "python/praktyka",
    "title": "Przechodzimy do praktyki",
    "contents": "Być może z rozpędu czy też przyzwyczajenia przejście od razu do części\npraktycznej tego przewodnika wydało Ci się dobrym pomysłem. Jeśli tak się stało,\nto zachęcam Cię do przeczytania części teoretycznej , żeby\ndowiedzieć się jaki miałem cel pisząc ten przewodnik i jakie powinny być Twoje\noczekiwania w stosunku do tego co tu znajdziesz. Co będziemy robić? Jak to co? Kodować w Pythonie! 🙂 W świecie dokumentacji do oprogramowania, istnieje wiele miejsc, gdzie\ntradycyjne \"kopiuj-wklej\" można potencjalnie zastąpić jakimś automatycznym\nrozwiązaniem, które odwali za nas brudną robotę. Wyobraź sobie taki scenariusz. Dostajesz przydział do projektu, w którym\nbędziesz bardzo blisko współpracować z programistami. Ustaliliście na samym\npoczątku, że za każdym razem kiedy programista zrobi zmianę w kodzie, która musi\nzostać udokumentowana, doda do folderu docs plik tekstowy z opisem zmian. Plik\nbędzie miał taką nazwę jak numer historyjki w systemie do śledzenia zadań. Na\nprzykład, jeśli historyjka ma numer PROJ-102 i została stworzona po to, żeby\nprogramista naprawił błąd powodujący, że aplikacja zawieszała się na kilka\nsekund, a następnie okno aplikacji przesuwało się poza ekran, to programista w\nrepozytorium z kodem doda plik docs\\PROJ-102.txt , w którym będzie taka\ninformacja. PROJ-102.txt Naprawiliśmy błąd, który powodował, że aplikacja zawieszała się na kilka\nsekund, a następnie okno aplikacji przesuwało się poza ekran przez co stawało\nsię niewidoczne. Co kilka tygodni zespół publikuje nową wersję aplikacji wraz z aktualną\ndokumentacją, której częścią są release notes (noty wydania). Treść, która\ntrafia do release notes pochodzi z plików tekstowych, które dodają programiści\nkiedy zmieniają kod. Twoim zadaniem, jako Tech Writera, jest sprawdzanie\ninformacji w tych plikach, poprawianie ich, a na końcu wygenerowanie pliku HTML\nz gotowymi notami. Jest to prosty plik z tabelką przedstawiającą zmiany w\naplikacji. Chodzi o coś takiego. Numer zgłoszenia Opis PROJ-102 Naprawiliśmy błąd, który powodował, że aplikacja zawieszała się na kilka sekund, a następnie okno aplikacji przesuwało się poza ekran przez co stawało się niewidoczne. PROJ-101 Dodaliśmy nową funkcję, która pozwala na szybkie pobieranie zasobów sieciowych. Nie chcesz generować pliku HTML poprzez ręczne przeklejanie informacji z plików\ntekstowych i potem wprowadzanie pozostałych poprawek, dlatego szukasz bardziej\nsprytnego rozwiązania. Chcesz swój czas i energię przeznaczyć głównie na\nulepszanie informacji, które dostarczają Ci programiści, a proces publikowania\nkońcowego pliku chcesz przekazać maszynie. I to właśnie będzie nasz cel, który będziemy krok po kroku realizować w\nkolejnych sekcjach. Zbudujemy razem przykładowy generator treści, który pobiera\ninformacje z plików tekstowych, a następnie generuje docelowy plik HTML na\npodstawie szablonu."
  },
  {
    "href": "python/teoria",
    "title": "Na początek trochę teorii",
    "contents": "Z doświadczenia wiem, że nikt nie lubi czytać wstępów. Jednak zachęcam Cię do\nprzeczytania tych kilku krótkich sekcji. Dzięki temu, zrozumiesz co, komu i w\njaki sposób chciałem przekazać za pomocą tego przewodnika. Dla kogo jest ten przewodnik? Dla osób zajmujących się tworzeniem dokumentacji do oprogramowania. Twoje\nstanowisko może mieć różne nazwy, ale ja dla uproszczenia będę się w tym\nprzewodniku posługiwał określeniem \"Tech Writer\". Po co powstał ten przewodnik? Moim celem nie jest zrobienie z Ciebie programisty. Nie dlatego, że nie jest to\nmożliwe, tylko dlatego, że jako Tech Writer wnosisz dużo do swojej organizacji.\nPoza tym, bycie programistą to coś więcej niż tylko nauczenie się składni\njakiegoś języka. To zestaw umiejętności oraz odpowiedni sposób myślenia. Tak\nsamo jest w przypadku pisania dokumentacji. Umiejętność pisania w dicie czy\nobsługi narzędzia typu HAT nie zrobi z Ciebie Tech Writera. Więc zostań tam\ngdzie jesteś. Moim celem jest zrobienie z Ciebie kodującego Tech Writera. Specjalnie używam\nsłowa \"kodować\" zamiast \"programować\", żeby jasno rozróżnić pomiędzy tym co robi\ntechniczny Tech Writer, a zawodowy programista. Nie staraj się zostać ekspertem\nw danym języku programowania. Potraktuj kodowanie jako narzędzie, które ułatwi\nCi osiąganie celów dokumentacyjnych. Niech to będzie kolejna umiejętność, która\nzrobi z Ciebie jeszcze lepszego Tech Writera. Ten przewodnik ma za zadanie wprowadzić Cię w świat kodowania w Pythonie i\nzachęcić Cię do pogłębiania wiedzy w tym obszarze. Dzięki temu łatwiej będzie Ci\ntworzyć praktyczne rozwiązania, które usprawnią proces tworzenia dokumentacji i\npozwolą Ci lepiej zintegrować się z tym co robią programiści w Twojej\norganizacji. Dlaczego warto kodować? Pewnie zastanawiasz się po co Ci kodowanie, skoro budowaniem aplikacji zajmuje\nsię ktoś inny, a Twoim zadaniem jest ich opisywanie. Nauka kodowania jest dla\nCiebie wartościowa z kilku powodów: Będziesz w stanie lepiej zrozumieć o czym mówią programiści. To na pewno\nułatwi Ci pracę. Ucząc się kodowania masz okazję korzystać z tych samych źródeł wiedzy co\nprogramiści. Dzięki temu lepiej zrozumiesz jak pracują i z jakimi wyzwaniami\nsię mierzą. To z kolei pozwoli Ci na łatwiejsze budowanie relacji z nimi. Poza\ntym łatwiej będzie Ci zagaić do nich przy kawie. Będziesz w stanie tworzyć rozwiązania, takie jak skrypty, które zautomatyzują\nnudną i powtarzalną część Twojej pracy. Na przykład, zamiast generować 10\nwersji dokumentu poprzez klikanie i czekanie a potem przenoszenie ich w\nmiejsce docelowe, napiszesz skrypt, który uruchomi budowanie dokumentów, a\npotem przekopiuje je gdzie trzeba. Przekazując takie zadania maszynie będziesz\nmieć więcej czasu na zajęcie się tym co jest ważne w pracy Tech Writera, a\nczego maszyna nie potrafi tak dobrze jak Ty, czyli tworzeniem użytecznej\ntreści. Jest to dobre ćwiczenie mentalne. Zmusisz swój mózg do innego rodzaju\naktywności od tego co robisz na co dzień jako Tech Writer. Zrozumiesz, że pisanie dokumentacji podczas kodowania nie jest do końca\nnaturalną rzeczą. Kiedy zatopisz się w kodowaniu, wchodzisz w tryb rozmowy z\nmaszyną i skupiasz się na rozwiązaniu problemu. Nie jest łatwo przełączyć się\nna tryb rozmowy z człowiekiem, czyli pisanie dokumentacji. Dlatego następnym\nrazem kiedy programista nie doda dokumentacji do swojego kodu, spojrzysz na\nniego łaskawszym okiem. Dlaczego Python? Python jest dobrym językiem, żeby rozpocząć przygodę z kodowaniem. Jego składnia\njest prosta i przejrzysta, dlatego pierwsze proste skrypty jesteś w stanie\nzacząć pisać szybko. To trochę jak mówienie po angielsku do komputera.\nUszczypliwi twierdzą wręcz, że składnia Pythona przypomina bardziej pseudokod\nniż prawdziwy kod. O ile dla programisty takie stwierdzenie może być obelgą i\nspowodować, że ucierpi na tym jego ego, o tyle dla Tech Writera jest to jak\nnajbardziej pozytywna rzecz, bo łatwiej jest się nauczyć takiej składni.\nSłyszałem kiedyś takie stwierdzenie, że łatwa składnia Pythona ułatwia skupienie\nsię na problemie, który chcemy rozwiązać zamiast na tym jak napisać kod. Jednak, żeby wszystko było jasne - Python nie jest prymitywny. To język, który\nma wiele twarzy. Jeśli potrzebujesz prostego skryptu, to możesz go napisać w\nrelatywnie krótkim czasie nie rozumiejąc dogłębnie wszystkich aspektów tego\njęzyka. Ale jeśli potrzebujesz napisać rozbudowaną aplikację, Python też to\npotrafi. Kiedyś przyszła mi do głowy taka analogia - Python dla Tech Writera jest jak\nMarkdown dla programisty. Nie zajmujesz się zawodowo programowaniem i kodowanie\njest dla Ciebie kolejnym narzędziem do osiągania dokumentacyjnych celów, dlatego\npotrzebujesz czegoś łatwego i przyjemnego. Tak samo jest w przypadku\nprogramistów. Ich głównym zadaniem jest programowanie, a nie pisanie\ndokumentacji, dlatego również potrzebują czegoś z czego można szybko zacząć\nkorzystać. Jak będziemy się uczyć? Python jak by nie było jest językiem. Co prawda programowania, ale nadal\njęzykiem. Każdy kto uczęszczał do szkoły miał okazję uczyć się (lub być uczonym)\njakiegoś języka. Dlatego chciałbym podejść do nauki Pythona jak do nauki języka\nangielskiego. Jednak w przeciwieństwie do tradycyjnej szkoły, w tym przewodniku\n\"gramatyką\" zajmiemy się tylko do takiego stopnia, żeby było wiadomo co się\ndzieje i żeby mieć poczucie komfortu w trakcie pisania kodu. Nie zrozum mnie\nźle, gramatyka jest ważna i jej znajomość jest jak najbardziej wartościowa, ale\nna etapie gdzie zaczynasz swoją przygodę z językiem skupimy się na\n\"konwersacjach\". Wskoczymy na głęboką wodę i od razu zaczniemy rozmawiać z komputerem. Na\npoczątku nie będziesz do końca rozumieć co mówisz, pewne zasady być może będą\ndla Ciebie niejasne, ale będziesz mieć poczucie, że uczysz się czegoś\npraktycznego i będziesz od razu widzieć efekty tej nauki. Czyli będzie dokładnie\ntak jak podczas nauki angielskiego poprzez konwersacje z native speakerem.\nZamiast uczyć się reguł kodowania w Pythonie, żeby potem błyszczeć w\ntowarzystwie wiedzą teoretyczną, stworzymy razem przykładową aplikację, dzięki\nktórej nauczysz się czegoś praktycznego i zobaczysz w jakich obszarach znajomość\nPythona może Ci pomóc w pracy Tech Writera. Zatem, nie przedłużając, przystąpmy\ndo kodowania."
  },
  {
    "href": "read",
    "title": "Czytelnia",
    "contents": "DITA as code - a modern approach to the classic standard (Napisaliśmy ten artykuł po angielsku!) This article aims to show how you can use DITA in the docs as code model. Unlike some of the more accessible but simpler markup languages like Markdown, DITA offers a structured framework for content creation. At the same time, it has enough flexibility to fit modern workflows and create a collaborative space for cross-functional teams. Czytaj artykuł Tech Writer koduje w Pythonie. Przewodnik szybkiego startu. Jako Tech Writer, możesz zrobić bardzo dużo przy użyciu odrobiny programowania. Nie musisz być ekspertem, wystarczy, że umiesz użyć Pythona jako narzędzia. A zacząć jest bardzo łatwo. Udostępniamy darmowy przewodnik szybkiego startu. Czytaj przewodnik Dokumentacja do oprogramowania. Poradnik dla managerów. Ta książka została napisana z myślą o osobach odpowiedzialnych za dokumentację w firmie. Nieważne czy jesteś na stanowisku kierowniczym i prowadzisz zespół, czy jesteś product ownerem i w Twoim produkcie nie ma jeszcze dokumentacji czy jesteś jedynym Technical Writerem w firmie. Czytaj online za darmo. Czytaj książkę"
  },
  {
    "href": "watch",
    "title": "Filmiki",
    "contents": "Is tech writing in Central and Eastern Europe growing? (soap!) Nasza prezentacja z konferencji soap! w 2022 roku. The world is now more open to remote work and that gives us, technical writing professionals, more opportunities than ever before. If I want to work remotely, which countries should I look into? And what if I want to relocate? Or what if I want to look for writers for my team? ITCQF compiled statistics about technical writers employed in countries across Europe. Come to this talk to learn about which countries have the most writers, which ones have the most job offers, what the salaries are and how the markets have grown or shrunk. You can also learn where the growing trends have been the most rapid. soapconf.com Doing docs like code (soap!) Nasza prezentacja z konferencji soap! w 2019 roku. soapconf.com Semantic testing in DITA Prezentacja z TC World 2020. DITA umożliwia semantykę, która wychodzi daleko poza proste formatowanie tekstu. Semantyka w DITA pozwala na pisanie testów, które sprawdzają dokumentację z kodem lub aplikacją. Przykładowy projekt"
  }
]