{"pageProps":{"id":"abandon-docs-as-code","contentHtml":"<p>No, they’re not.</p>\n<h2>Executive summary</h2>\n<p>This article started as an attempt to answer questions about tech writing tools.\nInstead of using what I personally know or believe I decided to find out what\nother people in the field are saying. I also wanted to get quotes to give this\narticle more substance, like journalists do.</p>\n<p>I was looking for answers to these questions:</p>\n<ul>\n<li>Are people migrating from docs as code back to enterprise CCMSes?</li>\n<li>Are the ones who migrated from an enterprise CCMS to docs as code, happy they\ndid it?</li>\n</ul>\n<p>The answer to the first question was a resounding “no” - the people I found are\nnot planning to go back to enterprise CCMSes.</p>\n<p>The answer to the second question is generally “yes” - people are happy they\nmade the transition to docs as code and open source tools. Are they as happy as\nthey anticipated? Almost always no, but still much happier than they were.</p>\n<p>The main reasons cited for switching were:</p>\n<ul>\n<li>The CCMS was low quality: frequent downtimes, missing features, bugginess,\nslowness, frustration, and general burden on the workforce.</li>\n<li>The CCMS was too expensive compared to the benefits it brought.</li>\n<li>The CCMS makes it hard or impossible to involve software developers in writing\ndocs. This also extends to involving any other people who are not specialists\nat using technical writing tools.</li>\n</ul>\n<p>Once people switched to docs as code, they were happy. They also enjoyed\nadditional benefits which they didn’t necessarily anticipate:</p>\n<ul>\n<li>Continuous delivery of docs</li>\n<li>More flexibility with content sources</li>\n<li>More control over the doc site appearance and features</li>\n<li>Integration with the broader company SDLC (rather than having a completely\nseparate tech writing process)</li>\n<li>More reliable (fewer bugs) and faster (less time spent waiting on spinning\ncursors) tools based on Git</li>\n<li>New transferable skills, like using Git, acquired by writers</li>\n<li>More empathy from writers towards programmers and their daily work</li>\n</ul>\n<h2>Methodology</h2>\n<p>This is not a study. I don’t have statistics to back me up, I didn't send a\nsurvey to thousands of people to get a good sample size. Instead, I did\nsomething similar to what people do in UX, where they work with a small group of\nrespondents.</p>\n<p>Or, if you wish, this is a piece of journalism where a limited group of people\nis interviewed and their words are passed on to the reader.</p>\n<p>First, I posted a survey on social media. Out of the people who responded, I\nfocused on executives who had an active part in making the decision to\ntransition. I also narrowed it down to people who are experts in the field of\ntechnical writing - not general business managers, product owners, etc. My\nfinal group were mostly people who called themselves “documentation managers” or\nsomething similar. None of them wanted to make their name public, as they did\nnot want to speak on behalf of their company or present their opinions as their\nown to the public. Nonetheless, I got a solid six interviews.</p>\n<p>I was hoping to find instances of people going back to an enterprise CCMS after\nthey had transitioned to docs as code. I didn’t find a single one. Maybe I will\nfind somebody who can speak to that in the future. If I can, I will consider\npublishing my findings.</p>\n<h2>Why people left their CCMSes</h2>\n<p>The most-cited reasons were around poor functionality. “[The CCMS] was very\nslow. Writers were spending a lot of their time looking at spinning cursors,”\nsays a documentation manager at an American software company. “And the rest of\nthe time, they were working around the limitations of the tool.” She explains in\ndetail how the versioning scheme for this CCMS did not fit how they wanted to\npublish the docs, so they had to make the same change in multiple copies of the\nsame document. “Reuse did not work at all. We did not want to repeat the same\ntopic in multiple publications, but we wanted to have a copy for each release.\nWe ended up with [the vendor’s] idea of branching which was more like keeping\ncopies of the entire topic set in separate folders.”</p>\n<p>Multiple interviewees were disillusioned with the promise of reuse and single\nsourcing. The CCMSes excelled at putting together books with variations of\nreused topics, but that was not what my interviewees needed. “This would work\ngreat in manufacturing,” said one, “but in software you don’t want to break your\nSEO with fifteen copies of the same page.”</p>\n<p>Another problem was the cost. All my interviewees had to pay vendor fees and at\nthe same time delegate somebody on their team to look after the CCMS. When they\nhad problems, the vendor offered support, but rarely bug fixes and never free\nfeatures. “[Most customizations were] projects we had to pay for,” says one\ndocumentation director. Vendors would seek ways to monetize each engagement, and\nthe money people were paying already was treated as a given. “We were not\ngetting good support,” says an interviewee from a European software house.</p>\n<p>Three interviewees said they kept their doc tools support team but reassigned\nthem to work on open-source docs-as-code tools. Three others said they had to\ngrow the team by a little; from 1-2 to 3 people. The cost of hiring was always\nlower than what they were paying to the vendor. In addition, the teams were\nalways able to build their solutions on the existing company infrastructure.</p>\n<h2>A qualified success</h2>\n<p>The people I interviewed were happy they switched to docs as code, but at the\nsame time they were disappointed in some aspects. One common pattern was that\npeople wanted to switch to get software developers to contribute to the docs. In\nmost cases, developers started contributing only very occasionally, not as much\nas the doc teams hoped for.</p>\n<p>Another source of disappointment was the initial learning curve. Technical\nwriters who were used to using WYSIWYG tools for documentation needed some time\nto ramp up on Git. Some people even left the teams or retired early because of\nthis. On the other hand, those who stayed said they acquired some “reusable\nskills”. One content strategist says her entire team became much more versatile\nand branched out into areas which were much more technical than what they used\nto do. They started dealing with search optimization, API docs, and some light\nfront-end development to create more beautiful landing pages.</p>\n<h2>But a success undoubtedly</h2>\n<p>Despite their disappointment in collaboration and the steep learning curve, all\nthe interviewees were happy with the transition.</p>\n<p>“We can now do continuous delivery to our company website. With [the CCMS] we\nhad to publish to [the vendor’s] knowledge portal. And each publication job\nwas a slow manual process,” says a doc team leader at a European software\ncompany.</p>\n<p>Another one praised the flexibility of the new tools. “If we want to change\nsomething on the website, we can do it because it’s our website. We don’t have\nto pay a huge bill just to change some CSS.” Then they went on to talk about the\nfeatures they introduced on the website which were more than CSS: adjustments to\nthe search engine, pop-up surveys, and a dynamic home page.</p>\n<p>One of the interviewees talked about how they integrated multiple content\nsources. In their enterprise CCMS they could use only DITA for their website.\nAfter moving to docs as code, they can now use static site generators. “We have\nsome Docusaurus sites [and] a few Hugo sites [...] We also pull in articles\nfrom Medium.com.”</p>\n<p>An unexpected benefit is that technical writers learn to understand programmers\nbetter. Two interviewees spoke about using the same tools as the software\ndevelopers at the company. They mentioned “using the same code editor,\ncommitting changes to Git and using CI/CD” as things that writers now have “in\ncommon with programmers.” One interviewee said: “My team have started writing\nbetter developer docs. We keep getting positive feedback.”</p>\n<h2>Process changes</h2>\n<p>All my interviewees said they had to adjust their writing process. The vast\nmajority went from big infrequent releases to continuous delivery. One team\nleader said: “We could finally step out of the tech writing niche and join the\nrest of the company. We went from having a whole separate custom process to\nsomething that mirrored the SDLC [software development lifecycle] at every\nstep.”</p>\n<p>The idea of tech writing teams having a separate process from software teams is\nbroad enough that it could serve as the topic for an entire article. Personally,\nI might be interested in exploring that more in the future.</p>\n<h2>Conclusions about the process of writing this article</h2>\n<p>The initial spark for this article was Sarah Moir’s article titled\n“<a href=\"https://thisisimportant.net/posts/docs-as-code-broken-promise/\">Docs as code is a broken promise</a>”.\nAt first, I considered writing my article as a polemic to Sarah’s, but then, I\ndecided to go in a different direction. I started wondering if people’s\ndissatisfaction with docs as code makes them look for a CCMS. The idea seemed so\ninteresting to me that I had to explore it. Sarah’s article contains a lot of\ncriticism for docs as code. Criticism which I’ve seen echoed in the initial\nsurvey responses and the subsequent interviews. Nonetheless, I did not find\nanybody who wants to move from docs as code to a vendor CCMS. I hope maybe\nposting this article will prompt people to get in touch. If you want to chat,\nreach out to me on <a href=\"https://www.linkedin.com/in/pawel-kowaluk/\">Linkedin</a>.</p>\n<p>Other than that, I would like to restate one thing: this article does not claim\nanything about tech writing <strong>as a whole</strong>. The interviewees all write docs for\nsoftware, not manufacturing or the machine industry. Moreover, it’s a very\nnarrow sample of people from my own bubble. Arguably, there are teams out there\nwho are having a bad time with docs as code. But as much as I want to present a\nbalanced view, I just find no evidence for their existence. Could it be that\ndocs as code is just perfect for software documentation? Seems too good to be\ntrue. I love learning new things and changing my mind, so please, reach out with\nevidence to the contrary.</p>\n","title":"Are people abandoning docs as code?","episodeId":null,"description":"Based on interviews with content professionals. Are people looking to swap their open-source tools for an enterprise doc writing experience? Find out the answer! (Spoiler alert, then answer is no)","author":"Paweł Kowaluk"},"__N_SSG":true}