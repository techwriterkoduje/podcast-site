{"pageProps":{"id":"broken-promise","contentHtml":"<p>This article is inspired by Sarah Moir's\n<a href=\"https://thisisimportant.net/posts/docs-as-code-broken-promise/\">article about docs as code with a similar title</a>,\nbut it's by no means an attack on the author. Nor are we trying to be nasty,\nmean, or to mock anyone. This is rather a response to people who are using the\narticle to sell you an enterprise CCMS as a remedy to the problems of docs as\ncode.</p>\n<p>Their shenanigans cannot go uncontested.</p>\n<p>Sarah's article rightfully points out what problems docs as code can cause and\nhow much work it takes to make the most of it. We have a lot of empathy for\nthose who experience hardship but at the same time we think that the article\ndoesn't tell the whole story. People saying \"you might as well pay a vendor\" are\ncreating a false equivalency. We would like to point out that you will pay a bag\nof money ðŸ’° and replace your docs-as-code problems with a whole set of new\nproblems. You will be babysitting a system, a vendor, and your docs, and then\nalso paying an arm and a leg for it.</p>\n<p>But let's not speak in generalities. Let's go through our grievances one by one.</p>\n<h2>The trailer is better than the movie</h2>\n<p>Sarah lists several promises that, in her opinion, the docs as code philosophy\ndoesn't deliver. However, we have spoken to multiple real-life vendors who\npromised us the moon and then we found ourselves lost in the emptiness of space.</p>\n<p>The following are actual quotes, not even heightened for dramatic effect:</p>\n<p>\"We'll allow creating branches, just like Git\" - turns out it is very much\n<strong>not</strong> like Git and the branches are just copies of folders.</p>\n<p>\"You can publish from any source format you want\" - as long as it's DITA or a\n.zip archive of pages that have already been published with something else.</p>\n<p>\"The UI is customizable, you will be able to apply your branding\" - cannot\nchange spacing and adding a font costs $3k a year.</p>\n<p>\"We'll add support for publishing PDFs in Chinese\" - have to use a Windows\nvirtual machine where the system language is set to Chinese. (Okay, that one was\na long time ago, but it was just too funny not to quote.)</p>\n<p>They will promise anything, but you pay to get all your dreams dashed.\nMeanwhile, your PDF or website is not the quality you would expect, and you are\nleft frustrated and burnt out.</p>\n<h2>Avoid complexity - focus on writing</h2>\n<p>You are a writer, it's what you do best. You should be given time to research\ntopics, interview SMEs, study your audience, and then write, edit, and refine.\nWe agree with that. You should be given a blank sheet of paper and a keyboard,\nand then have at it.</p>\n<p>But this is not what you are given by a CCMS. Every little tool, no matter how\nsimilar it is to a piece of paper, is not that. It has quirks and bugs and\nerrors that you will run into. It won't work on your OS, so you need to run a\nvirtual machine, or it's an old version of Oxygen with a plugin, or it requires\nJava 8, or a specific web browser. Now you're worrying about all those technical\ndetails, like you would with Markdown.</p>\n<p>And even if it works perfectly well, it's never just writing. Your CCMS makes\nassumptions on how docs should be versioned and how metadata should be injected.\nSo you spend time learning the system to find out what works with what.</p>\n<p>Then you generate your website or PDF and you notice something is not right - a\nparagraph is missing, or something does not display correctly. Among all this\ncomplexity, you made a mistake. That's okay, that's understandable. Mistakes are\nthere until you correct them. So you go back and try, and sometimes you fix it.\nBut other times, you can't fix it - it's a proprietary system, intellectual\nproperty, a treasure of human achievement, so you need to go back to a\ntechnologist - either your internal doc tools support team, or the vendor. And\nnow, instead of writing, you're dealing with all that.</p>\n<p>Sarah points out that Git is confusing. We can't deny that it takes time and\neffort to grok this version control system, but we could say the same thing\nabout any other solution that you aren't familiar with. Is learning a\nvendor-specific versioning system easier? It also has its rules that you need to\ndig into and they can also be confusing, at least at the beginning of your\njourney. You can learn this vendor solution using their docs or courses.</p>\n<p>Similarly, you can learn Git. It can be even easier for Git than for vendor\nsolutions because everyone in your software organization already uses it and can\nhelp. Plus, there's plenty of resources available online for free.</p>\n<p>The same cannot be said for vendor solutions. More often than not, learning\nresources and knowledge are delivered and controlled by the vendor, which can\nsignificantly reduce their variety and completeness.</p>\n<h2>Don't take shared ownership for granted {#don't-take-shared-ownership-for-granted}</h2>\n<p>Sarah is disappointed with docs as code because it doesn't deliver on its\npromise of shared ownership of documentation. In our opinion, it isn't the issue\nwith the docs as code philosophy itself. If you make a decision about using a\nparticular solution in isolation, there's nothing shared about it. If the doc\nteam decides to use docs as code and doesn't involve devs in the decision making\nprocess at the very beginning, they shouldn't be surprised that they're on their\nown with their technical challenges.</p>\n<p>Sarah talks about merge gates and build checks and how they're great in theory\nbut in practice you need to build them yourself so in most cases they don't\nexist. Again, if you work across teams while making decisions about using docs\nas code, your chances of getting those checks are much higher.</p>\n<p>On the other hand, if the dev team makes such a decision without talking to the\ndoc team, they shouldn't be surprised that writers are reluctant to use their\nstate-of-the-art toolset, struggle with basic tasks, and are slow to deliver\ncontent. As the name suggests, tech writers are technical but by no means are\nthey programmers, so they need support with tooling.</p>\n<p>In both cases, it's an organizational problem. But at least, there's a promise\nthat can be delivered if you make decisions and set expectations correctly. With\na vendor solution you cannot break this promise because it doesn't exist in the\nfirst place. Devs won't touch your CCMS with a ten-foot pole so shared ownership\nof documentation is as real as yeti. By choosing a vendor solution, you\nautomatically exclude other teams from truly participating in the doc delivery\nprocess. No promise, no problem.</p>\n<h2>Control the tools</h2>\n<p>In case of a vendor solution, you get a unified writing environment, most likely\na bundled editor of some kind. In Sarah's opinion, it's better than what docs as\ncode offers - an uncontrolled environment where people use different writing\ntools. To us, it's quite the opposite. Imagine a dev coding happily in VS Code,\nimplementing a new feature. When they're done, they want to update the docs.\nInstead of doing it in their coding environment, committing changes and moving\nto another task, they are forced to switch context completely, open a CCMS\neditor, check out the proper topic and do all other things that are required to\nmake an update. (Assuming they have a license to use itâ€¦) In such a scenario,\nmore often than not, the dev will try not to touch the docs.</p>\n<p>Sure, it's easier to control a CCMS tool made strictly for writing docs. You can\nenforce all the linters, formatters, etc. But we think it's not worth it if it\nmeans sacrificing contributions from non-writers. You can tell your writing\nteams which linters and formatters they have to use, and suggest your\nnon-writers do the same.</p>\n<p>Also, there are ways to share settings in an environment where people write in\nwhatever editor they like. Devs do it all the time for coding - in many\nprojects, you have freedom to choose your IDE and it works. A good example of\nthis is Prettier. It's a community linter which has a standardized way of\ndefining settings in a file, and most IDEs support it.</p>\n<h2>Somebody takes care of problems</h2>\n<p>So let's talk about what happens now that something is broken. If you have a doc\ntools support team, they will deal with it, or interface with the vendor. But\nthere are things they cannot change, because it's precious proprietary code, so\nit's the vendor who has to fix it. Except they \"don't have cycles this quarter\".\nAnd you might say \"this is not my problem\" which is fair enough, but your thing\nis still not working until somebody takes care of it.</p>\n<p>Or you might say \"but with open source tech, the same thing would happen\" - to\nwhich we say yes, but it would be much easier to fix. Because the code is open,\nthere's plenty of people who would've dealt with it before (i.e., you can Google\nit), and once it's fixed, you know how to deal with things like that in the\nfuture.</p>\n<p>Fixing a technical problem in open source stuff is only unfair if you, the\nwriter, are left to your own devices. But then it's not a problem with choosing\nthe wrong tool. You <strong>should</strong> get support from either a dedicated doc tools\nteam, or from software developers at your company. If you do not, it's an\norganizational issue and it would've been the same with a vendor. We've already\ncovered this point in\n<a href=\"#don&#x27;t-take-shared-ownership-for-granted\">Don't take shared ownership for granted</a>.</p>\n<h2>A fundamental conflict of interest</h2>\n<p>You may argue that a vendor solution comes with real support. However, the\nsupport team you're paying for is hoping you do not ask them for help. The whole\nbusiness model relies on <strong>people paying for the service and not using it</strong>, so\neach time they do something for you, they lose money. You think we're\nexaggerating? Ask your own boss how your support team works and weep.</p>\n<p>And if you ask for something which goes beyond the scope of simple issues, they\nwon't \"have cycles this quarter\". What are you going to do? Sue them? If your\norganization has left you in this state of neglect, they are not going to use\ntheir army of lawyers to fight for you. They'll have whiskey and cigars with Reg\nthe Customer Success Manager, and they will go into a conference room where they\nwill be shown all the advances coming in the next release.</p>\n<h2>Awesome features</h2>\n<p>But for the sake of the argument, let's say nothing ever goes wrong, or if it\ndoes somebody takes care of it and you never worry. Now you get to use all these\namazing features, like simplified workflows, full automation, and seamless\ncollaboration.</p>\n<p>If you've been paying attention, you probably know we are about to dispel these\nillusions now.</p>\n<h3>Simplified workflows</h3>\n<p>Or masterful versioning, or hands-off content management, or whatever they call\nit. It's never done the way your company does versioning. It's always some weird\nidea that's supposed to work for everyone but works for very few. For example,\nthe CCMS wants you to maintain a single version and once it's published, you\nmove on to another one. Updating multiple releases is not a feature. Or the\nopposite, every update causes updates in multiple places, so it's a very\nlabor-intensive process.</p>\n<p>Whatever it is, you have to <strong>change your workflow to suit the tool</strong>.</p>\n<p>A concrete example of this could be a reused piece of content - a paragraph\nabout something that's universal across 24 of your products, so it's reused.\nUntil it's not and you have to \"break reuse\" in 12 places. How does the vendor\nintend for you to do it? You need to open 12 docs and clickety-clack some\noptions. Yes, it might be easy to do, but it's most likely error-prone and\nannoying.</p>\n<p>What's the point here? The simplified workflow means you have to do things a\ncertain way and cannot deviate too much, otherwise it wouldn't be simplified.</p>\n<p>Now, if this was docs as code and you were using Git, and you were already\nwell-versed with how things work, you could issue a few commands or write a\nscript and deal with any edge case that comes your way. Your skills would be\nsharper and you would have more freedom.</p>\n<h3>Full automation</h3>\n<p>Just click this button and your PDF/website is published. But where? Is the CCMS\nnow your documentation portal? Shouldn't this be somewhere on a website your\ncompany already has?</p>\n<p>And if the CCMS allows you to publish to any platform and automate your\nintegrations, what happens when something changes? Like your company changes the\nrelease strategy, or the vendor system is behind on security. You will have to\ngo back to the vendor or whoever set it up and fix it. Upgrade the old Tomcat\nserver running on an old virtual machine somewhere, the last one at your\ncompany, because the vendor license agreement does not allow running their\nsolution in a CI/CD pipeline or on a server in the cloud.</p>\n<p>You don't know what that last part means? Then good luck making it work. ðŸ˜…</p>\n<h3>Seamless reviews</h3>\n<p>Get your SMEs to review the content in the CCMS - it's that simple! That is\nassuming you don't have to be a technical writer to understand what's going on.\nIf your SMEs are programmers, they could probably learn anything, while mumbling\ncomplaints quietly. But any non-technical folks will struggle, so you will spend\ntime teaching them, or copying their comments from emails, or Google Docs, or\nAdobe PDF reviews.</p>\n<p>That is, if your company can afford enough \"reviewer seats\". That's right, you\nhave to pay! You might say \"what do I care?\" Granted, if your company pays, you\ndon't have to care. You only have to care if they don't.</p>\n<p>Sarah rightfully points out that reviewing content directly in platforms like\nGitHub or GitLab doesn't work well. But does this argument really invalidate\nusing docs as code? Our experience tells us that such tools can be used mostly\nfor reviewing simple changes. For more complex modifications spanning across the\ndocument, you need to find something better.</p>\n<p>It's exactly the same when you review code. It's not like devs review all their\ncode directly in GitHub. They have more robust solutions, like VS Code plugins\nor Git clients built into their IDEs, that offer more features and better user\nexperience. The beauty of open source is there is this huge variety of solutions\nthat have been tested by the community. And your dev community will probably\nhave solutions. After all, they're the ones who will be doing the reviewing.</p>\n<p>So you could be reviewing a copy of your docs built from a branch, hosted on a\nside-server, with comments enabled by a free comment plugin. And then the review\nis done, CI/CD cleans up the deployment. Or it's some other solution that a\nsingle dev can put together in a couple of days. And then it's yours forever.</p>\n<h2>So what? I have to use Markdown in Git?</h2>\n<p>No, we're not saying that. The thesis of this article is not \"there's a solution\nthat fits all and it's docs as code\". Problems described by Sarah are real, no\ndoubt about it, but for us the article <strong>is used by bad actors</strong> to create a\nfalse equivalency between docs as code and vendor CCMS. The article lists a lot\nof problems you could run into when doing docs as code, and they are all true\ngrievances somebody has. And then a CCMS vendor grabs the article and uses it in\ntheir marketing to say: \"look at all these bad things, they never happen with\nour tools!\"</p>\n<p>For us, the docs as code model isn't the culprit. The author doesn't give us any\nbackground on who and how decided to implement this model, but we're pretty sure\nthat these issues could have been avoided. Maybe it's by involving all\ninterested parties in the decision making process, stating goals and\nrequirements together, and setting the right expectations before implementing\nthe solution. We don't know the exact situation, so we're only hinting at one\npossible avenue.</p>\n<p>Each and every system will have its issues, and it will be up to you to deal\nwith them. It's your choice how you approach it. Will you learn some proprietary\nvendor CCMS and deal with people and politics to make your project move forward\n(and pay a lot of money for the experience)?</p>\n<p>Or will you sharpen your technical skills, use free and open technology, and\nhave the satisfaction of approaching your docs holistically? Yeah, it's hard.\nYour team's time and emotional work is probably similar to what you go through\nwith a CCMS, but there's no additional vendor fee attached. And your skillset\nexpands with skills you can take with you anywhere you go.</p>\n<p>Is this a fairer equivalency? That's up to you to decide.</p>\n","title":"A tech Writing CCMS can also be a broken promise","episodeId":null,"description":"CCMS vendors are creating a flase equivalency between docs as code and their systems. If naything is wrong with docs as code, their CCMS is supposed to be the answer. We beg to differ.","author":"PaweÅ‚ Kowaluk, MichaÅ‚ Skowron"},"__N_SSG":true}